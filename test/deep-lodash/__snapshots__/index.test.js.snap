// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Publish Test File via Babel: cjs 1`] = `
"/*! deep-lodash v1.0.0 by Sebastian Werner <s.werner@sebastian-software.de> */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

/** Detect free variable \`global\` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var _freeGlobal = freeGlobal;

/** Detect free variable \`self\`. */

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = _freeGlobal || freeSelf || Function('return this')();
var _root = root;

/** Built-in value references. */

var Symbol = _root.Symbol;
var _Symbol = Symbol;

/**
 * A specialized version of \`_.map\` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }

  return result;
}

var _arrayMap = arrayMap;

/**
 * Checks if \`value\` is classified as an \`Array\` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns \`true\` if \`value\` is an array, else \`false\`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;
var isArray_1 = isArray;

/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [\`toStringTag\`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/** Built-in value references. */

var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
/**
 * A specialized version of \`baseGetTag\` which ignores \`Symbol.toStringTag\` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw \`toStringTag\`.
 */

function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);

  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }

  return result;
}

var _getRawTag = getRawTag;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;
/**
 * Used to resolve the
 * [\`toStringTag\`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString$1 = objectProto$1.toString;
/**
 * Converts \`value\` to a string using \`Object.prototype.toString\`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

function objectToString(value) {
  return nativeObjectToString$1.call(value);
}

var _objectToString = objectToString;

/** \`Object#toString\` result references. */

var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';
/** Built-in value references. */

var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;
/**
 * The base implementation of \`getTag\` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the \`toStringTag\`.
 */

function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }

  return symToStringTag$1 && symToStringTag$1 in Object(value) ? _getRawTag(value) : _objectToString(value);
}

var _baseGetTag = baseGetTag;

/**
 * Checks if \`value\` is object-like. A value is object-like if it's not \`null\`
 * and has a \`typeof\` result of \\"object\\".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns \`true\` if \`value\` is object-like, else \`false\`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

var isObjectLike_1 = isObjectLike;

/** \`Object#toString\` result references. */

var symbolTag = '[object Symbol]';
/**
 * Checks if \`value\` is classified as a \`Symbol\` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns \`true\` if \`value\` is a symbol, else \`false\`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike_1(value) && _baseGetTag(value) == symbolTag;
}

var isSymbol_1 = isSymbol;

/** Used as references for various \`Number\` constants. */

var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */

var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of \`_.toString\` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (isArray_1(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return _arrayMap(value, baseToString) + '';
  }

  if (isSymbol_1(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

var _baseToString = baseToString;

/**
 * Converts \`value\` to a string. An empty string is returned for \`null\`
 * and \`undefined\` values. The sign of \`-0\` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */

function toString(value) {
  return value == null ? '' : _baseToString(value);
}

var toString_1 = toString;

/**
 * The base implementation of \`_.slice\` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of \`array\`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }

  end = end > length ? length : end;

  if (end < 0) {
    end += length;
  }

  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;
  var result = Array(length);

  while (++index < length) {
    result[index] = array[index + start];
  }

  return result;
}

var _baseSlice = baseSlice;

/**
 * Casts \`array\` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */

function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return !start && end >= length ? array : _baseSlice(array, start, end);
}

var _castSlice = castSlice;

/** Used to compose unicode character classes. */
var rsAstralRange = '\\\\\\\\ud800-\\\\\\\\udfff',
    rsComboMarksRange = '\\\\\\\\u0300-\\\\\\\\u036f',
    reComboHalfMarksRange = '\\\\\\\\ufe20-\\\\\\\\ufe2f',
    rsComboSymbolsRange = '\\\\\\\\u20d0-\\\\\\\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\\\\\\\ufe0e\\\\\\\\ufe0f';
/** Used to compose unicode capture groups. */

var rsZWJ = '\\\\\\\\u200d';
/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
/**
 * Checks if \`string\` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns \`true\` if a symbol is found, else \`false\`.
 */

function hasUnicode(string) {
  return reHasUnicode.test(string);
}

var _hasUnicode = hasUnicode;

/**
 * Converts an ASCII \`string\` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

var _asciiToArray = asciiToArray;

/** Used to compose unicode character classes. */
var rsAstralRange$1 = '\\\\\\\\ud800-\\\\\\\\udfff',
    rsComboMarksRange$1 = '\\\\\\\\u0300-\\\\\\\\u036f',
    reComboHalfMarksRange$1 = '\\\\\\\\ufe20-\\\\\\\\ufe2f',
    rsComboSymbolsRange$1 = '\\\\\\\\u20d0-\\\\\\\\u20ff',
    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
    rsVarRange$1 = '\\\\\\\\ufe0e\\\\\\\\ufe0f';
/** Used to compose unicode capture groups. */

var rsAstral = '[' + rsAstralRange$1 + ']',
    rsCombo = '[' + rsComboRange$1 + ']',
    rsFitz = '\\\\\\\\ud83c[\\\\\\\\udffb-\\\\\\\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange$1 + ']',
    rsRegional = '(?:\\\\\\\\ud83c[\\\\\\\\udde6-\\\\\\\\uddff]){2}',
    rsSurrPair = '[\\\\\\\\ud800-\\\\\\\\udbff][\\\\\\\\udc00-\\\\\\\\udfff]',
    rsZWJ$1 = '\\\\\\\\u200d';
/** Used to compose unicode regexes. */

var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange$1 + ']?',
    rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
/**
 * Converts a Unicode \`string\` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

var _unicodeToArray = unicodeToArray;

/**
 * Converts \`string\` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

function stringToArray(string) {
  return _hasUnicode(string) ? _unicodeToArray(string) : _asciiToArray(string);
}

var _stringToArray = stringToArray;

/**
 * Creates a function like \`_.lowerFirst\`.
 *
 * @private
 * @param {string} methodName The name of the \`String\` case method to use.
 * @returns {Function} Returns the new case function.
 */

function createCaseFirst(methodName) {
  return function (string) {
    string = toString_1(string);
    var strSymbols = _hasUnicode(string) ? _stringToArray(string) : undefined;
    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
    var trailing = strSymbols ? _castSlice(strSymbols, 1).join('') : string.slice(1);
    return chr[methodName]() + trailing;
  };
}

var _createCaseFirst = createCaseFirst;

/**
 * Converts the first character of \`string\` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */

var upperFirst = _createCaseFirst('toUpperCase');
var upperFirst_1 = upperFirst;

/**
 * Converts the first character of \`string\` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */

function capitalize(string) {
  return upperFirst_1(toString_1(string).toLowerCase());
}

var capitalize_1 = capitalize;

/**
 * A specialized version of \`_.reduce\` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of \`array\` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }

  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }

  return accumulator;
}

var _arrayReduce = arrayReduce;

/**
 * The base implementation of \`_.propertyOf\` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function (key) {
    return object == null ? undefined : object[key];
  };
}

var _basePropertyOf = basePropertyOf;

/** Used to map Latin Unicode letters to basic Latin letters. */

var deburredLetters = {
  // Latin-1 Supplement block.
  '\\\\xc0': 'A',
  '\\\\xc1': 'A',
  '\\\\xc2': 'A',
  '\\\\xc3': 'A',
  '\\\\xc4': 'A',
  '\\\\xc5': 'A',
  '\\\\xe0': 'a',
  '\\\\xe1': 'a',
  '\\\\xe2': 'a',
  '\\\\xe3': 'a',
  '\\\\xe4': 'a',
  '\\\\xe5': 'a',
  '\\\\xc7': 'C',
  '\\\\xe7': 'c',
  '\\\\xd0': 'D',
  '\\\\xf0': 'd',
  '\\\\xc8': 'E',
  '\\\\xc9': 'E',
  '\\\\xca': 'E',
  '\\\\xcb': 'E',
  '\\\\xe8': 'e',
  '\\\\xe9': 'e',
  '\\\\xea': 'e',
  '\\\\xeb': 'e',
  '\\\\xcc': 'I',
  '\\\\xcd': 'I',
  '\\\\xce': 'I',
  '\\\\xcf': 'I',
  '\\\\xec': 'i',
  '\\\\xed': 'i',
  '\\\\xee': 'i',
  '\\\\xef': 'i',
  '\\\\xd1': 'N',
  '\\\\xf1': 'n',
  '\\\\xd2': 'O',
  '\\\\xd3': 'O',
  '\\\\xd4': 'O',
  '\\\\xd5': 'O',
  '\\\\xd6': 'O',
  '\\\\xd8': 'O',
  '\\\\xf2': 'o',
  '\\\\xf3': 'o',
  '\\\\xf4': 'o',
  '\\\\xf5': 'o',
  '\\\\xf6': 'o',
  '\\\\xf8': 'o',
  '\\\\xd9': 'U',
  '\\\\xda': 'U',
  '\\\\xdb': 'U',
  '\\\\xdc': 'U',
  '\\\\xf9': 'u',
  '\\\\xfa': 'u',
  '\\\\xfb': 'u',
  '\\\\xfc': 'u',
  '\\\\xdd': 'Y',
  '\\\\xfd': 'y',
  '\\\\xff': 'y',
  '\\\\xc6': 'Ae',
  '\\\\xe6': 'ae',
  '\\\\xde': 'Th',
  '\\\\xfe': 'th',
  '\\\\xdf': 'ss',
  // Latin Extended-A block.
  '\\\\u0100': 'A',
  '\\\\u0102': 'A',
  '\\\\u0104': 'A',
  '\\\\u0101': 'a',
  '\\\\u0103': 'a',
  '\\\\u0105': 'a',
  '\\\\u0106': 'C',
  '\\\\u0108': 'C',
  '\\\\u010a': 'C',
  '\\\\u010c': 'C',
  '\\\\u0107': 'c',
  '\\\\u0109': 'c',
  '\\\\u010b': 'c',
  '\\\\u010d': 'c',
  '\\\\u010e': 'D',
  '\\\\u0110': 'D',
  '\\\\u010f': 'd',
  '\\\\u0111': 'd',
  '\\\\u0112': 'E',
  '\\\\u0114': 'E',
  '\\\\u0116': 'E',
  '\\\\u0118': 'E',
  '\\\\u011a': 'E',
  '\\\\u0113': 'e',
  '\\\\u0115': 'e',
  '\\\\u0117': 'e',
  '\\\\u0119': 'e',
  '\\\\u011b': 'e',
  '\\\\u011c': 'G',
  '\\\\u011e': 'G',
  '\\\\u0120': 'G',
  '\\\\u0122': 'G',
  '\\\\u011d': 'g',
  '\\\\u011f': 'g',
  '\\\\u0121': 'g',
  '\\\\u0123': 'g',
  '\\\\u0124': 'H',
  '\\\\u0126': 'H',
  '\\\\u0125': 'h',
  '\\\\u0127': 'h',
  '\\\\u0128': 'I',
  '\\\\u012a': 'I',
  '\\\\u012c': 'I',
  '\\\\u012e': 'I',
  '\\\\u0130': 'I',
  '\\\\u0129': 'i',
  '\\\\u012b': 'i',
  '\\\\u012d': 'i',
  '\\\\u012f': 'i',
  '\\\\u0131': 'i',
  '\\\\u0134': 'J',
  '\\\\u0135': 'j',
  '\\\\u0136': 'K',
  '\\\\u0137': 'k',
  '\\\\u0138': 'k',
  '\\\\u0139': 'L',
  '\\\\u013b': 'L',
  '\\\\u013d': 'L',
  '\\\\u013f': 'L',
  '\\\\u0141': 'L',
  '\\\\u013a': 'l',
  '\\\\u013c': 'l',
  '\\\\u013e': 'l',
  '\\\\u0140': 'l',
  '\\\\u0142': 'l',
  '\\\\u0143': 'N',
  '\\\\u0145': 'N',
  '\\\\u0147': 'N',
  '\\\\u014a': 'N',
  '\\\\u0144': 'n',
  '\\\\u0146': 'n',
  '\\\\u0148': 'n',
  '\\\\u014b': 'n',
  '\\\\u014c': 'O',
  '\\\\u014e': 'O',
  '\\\\u0150': 'O',
  '\\\\u014d': 'o',
  '\\\\u014f': 'o',
  '\\\\u0151': 'o',
  '\\\\u0154': 'R',
  '\\\\u0156': 'R',
  '\\\\u0158': 'R',
  '\\\\u0155': 'r',
  '\\\\u0157': 'r',
  '\\\\u0159': 'r',
  '\\\\u015a': 'S',
  '\\\\u015c': 'S',
  '\\\\u015e': 'S',
  '\\\\u0160': 'S',
  '\\\\u015b': 's',
  '\\\\u015d': 's',
  '\\\\u015f': 's',
  '\\\\u0161': 's',
  '\\\\u0162': 'T',
  '\\\\u0164': 'T',
  '\\\\u0166': 'T',
  '\\\\u0163': 't',
  '\\\\u0165': 't',
  '\\\\u0167': 't',
  '\\\\u0168': 'U',
  '\\\\u016a': 'U',
  '\\\\u016c': 'U',
  '\\\\u016e': 'U',
  '\\\\u0170': 'U',
  '\\\\u0172': 'U',
  '\\\\u0169': 'u',
  '\\\\u016b': 'u',
  '\\\\u016d': 'u',
  '\\\\u016f': 'u',
  '\\\\u0171': 'u',
  '\\\\u0173': 'u',
  '\\\\u0174': 'W',
  '\\\\u0175': 'w',
  '\\\\u0176': 'Y',
  '\\\\u0177': 'y',
  '\\\\u0178': 'Y',
  '\\\\u0179': 'Z',
  '\\\\u017b': 'Z',
  '\\\\u017d': 'Z',
  '\\\\u017a': 'z',
  '\\\\u017c': 'z',
  '\\\\u017e': 'z',
  '\\\\u0132': 'IJ',
  '\\\\u0133': 'ij',
  '\\\\u0152': 'Oe',
  '\\\\u0153': 'oe',
  '\\\\u0149': \\"'n\\",
  '\\\\u017f': 's'
};
/**
 * Used by \`_.deburr\` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */

var deburrLetter = _basePropertyOf(deburredLetters);
var _deburrLetter = deburrLetter;

/** Used to match Latin Unicode letters (excluding mathematical operators). */

var reLatin = /[\\\\xc0-\\\\xd6\\\\xd8-\\\\xf6\\\\xf8-\\\\xff\\\\u0100-\\\\u017f]/g;
/** Used to compose unicode character classes. */

var rsComboMarksRange$2 = '\\\\\\\\u0300-\\\\\\\\u036f',
    reComboHalfMarksRange$2 = '\\\\\\\\ufe20-\\\\\\\\ufe2f',
    rsComboSymbolsRange$2 = '\\\\\\\\u20d0-\\\\\\\\u20ff',
    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;
/** Used to compose unicode capture groups. */

var rsCombo$1 = '[' + rsComboRange$2 + ']';
/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */

var reComboMark = RegExp(rsCombo$1, 'g');
/**
 * Deburrs \`string\` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */

function deburr(string) {
  string = toString_1(string);
  return string && string.replace(reLatin, _deburrLetter).replace(reComboMark, '');
}

var deburr_1 = deburr;

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\x7f]+/g;
/**
 * Splits an ASCII \`string\` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of \`string\`.
 */

function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

var _asciiWords = asciiWords;

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
/**
 * Checks if \`string\` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns \`true\` if a word is found, else \`false\`.
 */

function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

var _hasUnicodeWord = hasUnicodeWord;

/** Used to compose unicode character classes. */
var rsAstralRange$2 = '\\\\\\\\ud800-\\\\\\\\udfff',
    rsComboMarksRange$3 = '\\\\\\\\u0300-\\\\\\\\u036f',
    reComboHalfMarksRange$3 = '\\\\\\\\ufe20-\\\\\\\\ufe2f',
    rsComboSymbolsRange$3 = '\\\\\\\\u20d0-\\\\\\\\u20ff',
    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
    rsDingbatRange = '\\\\\\\\u2700-\\\\\\\\u27bf',
    rsLowerRange = 'a-z\\\\\\\\xdf-\\\\\\\\xf6\\\\\\\\xf8-\\\\\\\\xff',
    rsMathOpRange = '\\\\\\\\xac\\\\\\\\xb1\\\\\\\\xd7\\\\\\\\xf7',
    rsNonCharRange = '\\\\\\\\x00-\\\\\\\\x2f\\\\\\\\x3a-\\\\\\\\x40\\\\\\\\x5b-\\\\\\\\x60\\\\\\\\x7b-\\\\\\\\xbf',
    rsPunctuationRange = '\\\\\\\\u2000-\\\\\\\\u206f',
    rsSpaceRange = ' \\\\\\\\t\\\\\\\\x0b\\\\\\\\f\\\\\\\\xa0\\\\\\\\ufeff\\\\\\\\n\\\\\\\\r\\\\\\\\u2028\\\\\\\\u2029\\\\\\\\u1680\\\\\\\\u180e\\\\\\\\u2000\\\\\\\\u2001\\\\\\\\u2002\\\\\\\\u2003\\\\\\\\u2004\\\\\\\\u2005\\\\\\\\u2006\\\\\\\\u2007\\\\\\\\u2008\\\\\\\\u2009\\\\\\\\u200a\\\\\\\\u202f\\\\\\\\u205f\\\\\\\\u3000',
    rsUpperRange = 'A-Z\\\\\\\\xc0-\\\\\\\\xd6\\\\\\\\xd8-\\\\\\\\xde',
    rsVarRange$2 = '\\\\\\\\ufe0e\\\\\\\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
/** Used to compose unicode capture groups. */

var rsApos = \\"['\\\\u2019]\\",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo$2 = '[' + rsComboRange$3 + ']',
    rsDigits = '\\\\\\\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange$2 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz$1 = '\\\\\\\\ud83c[\\\\\\\\udffb-\\\\\\\\udfff]',
    rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
    rsNonAstral$1 = '[^' + rsAstralRange$2 + ']',
    rsRegional$1 = '(?:\\\\\\\\ud83c[\\\\\\\\udde6-\\\\\\\\uddff]){2}',
    rsSurrPair$1 = '[\\\\\\\\ud800-\\\\\\\\udbff][\\\\\\\\udc00-\\\\\\\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ$2 = '\\\\\\\\u200d';
/** Used to compose unicode regexes. */

var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod$1 = rsModifier$1 + '?',
    rsOptVar$1 = '[' + rsVarRange$2 + ']?',
    rsOptJoin$1 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
    rsOrdLower = '\\\\\\\\d*(?:1st|2nd|3rd|(?![123])\\\\\\\\dth)(?=\\\\\\\\b|[A-Z_])',
    rsOrdUpper = '\\\\\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\\\\\dTH)(?=\\\\\\\\b|[a-z_])',
    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
    rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;
/** Used to match complex or compound words. */

var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
/**
 * Splits a Unicode \`string\` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of \`string\`.
 */

function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

var _unicodeWords = unicodeWords;

/**
 * Splits \`string\` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like \`_.map\`.
 * @returns {Array} Returns the words of \`string\`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */

function words(string, pattern, guard) {
  string = toString_1(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return _hasUnicodeWord(string) ? _unicodeWords(string) : _asciiWords(string);
  }

  return string.match(pattern) || [];
}

var words_1 = words;

/** Used to compose unicode capture groups. */

var rsApos$1 = \\"['\\\\u2019]\\";
/** Used to match apostrophes. */

var reApos = RegExp(rsApos$1, 'g');
/**
 * Creates a function like \`_.camelCase\`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */

function createCompounder(callback) {
  return function (string) {
    return _arrayReduce(words_1(deburr_1(string).replace(reApos, '')), callback, '');
  };
}

var _createCompounder = createCompounder;

/**
 * Converts \`string\` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */

var camelCase = _createCompounder(function (result, word, index) {
  word = word.toLowerCase();
  return result + (index ? capitalize_1(word) : word);
});
var camelCase_1 = camelCase;

function makeCamelCase(string) {
  return camelCase_1(string);
}

exports.makeCamelCase = makeCamelCase;
//# sourceMappingURL=index.cjs.js.map
"
`;

exports[`Publish Test File via Babel: esm 1`] = `
"/*! deep-lodash v1.0.0 by Sebastian Werner <s.werner@sebastian-software.de> */
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

/** Detect free variable \`global\` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var _freeGlobal = freeGlobal;

/** Detect free variable \`self\`. */

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = _freeGlobal || freeSelf || Function('return this')();
var _root = root;

/** Built-in value references. */

var Symbol = _root.Symbol;
var _Symbol = Symbol;

/**
 * A specialized version of \`_.map\` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }

  return result;
}

var _arrayMap = arrayMap;

/**
 * Checks if \`value\` is classified as an \`Array\` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns \`true\` if \`value\` is an array, else \`false\`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;
var isArray_1 = isArray;

/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [\`toStringTag\`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/** Built-in value references. */

var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
/**
 * A specialized version of \`baseGetTag\` which ignores \`Symbol.toStringTag\` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw \`toStringTag\`.
 */

function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);

  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }

  return result;
}

var _getRawTag = getRawTag;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;
/**
 * Used to resolve the
 * [\`toStringTag\`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString$1 = objectProto$1.toString;
/**
 * Converts \`value\` to a string using \`Object.prototype.toString\`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

function objectToString(value) {
  return nativeObjectToString$1.call(value);
}

var _objectToString = objectToString;

/** \`Object#toString\` result references. */

var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';
/** Built-in value references. */

var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;
/**
 * The base implementation of \`getTag\` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the \`toStringTag\`.
 */

function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }

  return symToStringTag$1 && symToStringTag$1 in Object(value) ? _getRawTag(value) : _objectToString(value);
}

var _baseGetTag = baseGetTag;

/**
 * Checks if \`value\` is object-like. A value is object-like if it's not \`null\`
 * and has a \`typeof\` result of \\"object\\".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns \`true\` if \`value\` is object-like, else \`false\`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

var isObjectLike_1 = isObjectLike;

/** \`Object#toString\` result references. */

var symbolTag = '[object Symbol]';
/**
 * Checks if \`value\` is classified as a \`Symbol\` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns \`true\` if \`value\` is a symbol, else \`false\`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike_1(value) && _baseGetTag(value) == symbolTag;
}

var isSymbol_1 = isSymbol;

/** Used as references for various \`Number\` constants. */

var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */

var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of \`_.toString\` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (isArray_1(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return _arrayMap(value, baseToString) + '';
  }

  if (isSymbol_1(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

var _baseToString = baseToString;

/**
 * Converts \`value\` to a string. An empty string is returned for \`null\`
 * and \`undefined\` values. The sign of \`-0\` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */

function toString(value) {
  return value == null ? '' : _baseToString(value);
}

var toString_1 = toString;

/**
 * The base implementation of \`_.slice\` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of \`array\`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }

  end = end > length ? length : end;

  if (end < 0) {
    end += length;
  }

  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;
  var result = Array(length);

  while (++index < length) {
    result[index] = array[index + start];
  }

  return result;
}

var _baseSlice = baseSlice;

/**
 * Casts \`array\` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */

function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return !start && end >= length ? array : _baseSlice(array, start, end);
}

var _castSlice = castSlice;

/** Used to compose unicode character classes. */
var rsAstralRange = '\\\\\\\\ud800-\\\\\\\\udfff',
    rsComboMarksRange = '\\\\\\\\u0300-\\\\\\\\u036f',
    reComboHalfMarksRange = '\\\\\\\\ufe20-\\\\\\\\ufe2f',
    rsComboSymbolsRange = '\\\\\\\\u20d0-\\\\\\\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\\\\\\\ufe0e\\\\\\\\ufe0f';
/** Used to compose unicode capture groups. */

var rsZWJ = '\\\\\\\\u200d';
/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
/**
 * Checks if \`string\` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns \`true\` if a symbol is found, else \`false\`.
 */

function hasUnicode(string) {
  return reHasUnicode.test(string);
}

var _hasUnicode = hasUnicode;

/**
 * Converts an ASCII \`string\` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

var _asciiToArray = asciiToArray;

/** Used to compose unicode character classes. */
var rsAstralRange$1 = '\\\\\\\\ud800-\\\\\\\\udfff',
    rsComboMarksRange$1 = '\\\\\\\\u0300-\\\\\\\\u036f',
    reComboHalfMarksRange$1 = '\\\\\\\\ufe20-\\\\\\\\ufe2f',
    rsComboSymbolsRange$1 = '\\\\\\\\u20d0-\\\\\\\\u20ff',
    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
    rsVarRange$1 = '\\\\\\\\ufe0e\\\\\\\\ufe0f';
/** Used to compose unicode capture groups. */

var rsAstral = '[' + rsAstralRange$1 + ']',
    rsCombo = '[' + rsComboRange$1 + ']',
    rsFitz = '\\\\\\\\ud83c[\\\\\\\\udffb-\\\\\\\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange$1 + ']',
    rsRegional = '(?:\\\\\\\\ud83c[\\\\\\\\udde6-\\\\\\\\uddff]){2}',
    rsSurrPair = '[\\\\\\\\ud800-\\\\\\\\udbff][\\\\\\\\udc00-\\\\\\\\udfff]',
    rsZWJ$1 = '\\\\\\\\u200d';
/** Used to compose unicode regexes. */

var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange$1 + ']?',
    rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
/**
 * Converts a Unicode \`string\` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

var _unicodeToArray = unicodeToArray;

/**
 * Converts \`string\` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

function stringToArray(string) {
  return _hasUnicode(string) ? _unicodeToArray(string) : _asciiToArray(string);
}

var _stringToArray = stringToArray;

/**
 * Creates a function like \`_.lowerFirst\`.
 *
 * @private
 * @param {string} methodName The name of the \`String\` case method to use.
 * @returns {Function} Returns the new case function.
 */

function createCaseFirst(methodName) {
  return function (string) {
    string = toString_1(string);
    var strSymbols = _hasUnicode(string) ? _stringToArray(string) : undefined;
    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
    var trailing = strSymbols ? _castSlice(strSymbols, 1).join('') : string.slice(1);
    return chr[methodName]() + trailing;
  };
}

var _createCaseFirst = createCaseFirst;

/**
 * Converts the first character of \`string\` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */

var upperFirst = _createCaseFirst('toUpperCase');
var upperFirst_1 = upperFirst;

/**
 * Converts the first character of \`string\` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */

function capitalize(string) {
  return upperFirst_1(toString_1(string).toLowerCase());
}

var capitalize_1 = capitalize;

/**
 * A specialized version of \`_.reduce\` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of \`array\` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }

  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }

  return accumulator;
}

var _arrayReduce = arrayReduce;

/**
 * The base implementation of \`_.propertyOf\` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function (key) {
    return object == null ? undefined : object[key];
  };
}

var _basePropertyOf = basePropertyOf;

/** Used to map Latin Unicode letters to basic Latin letters. */

var deburredLetters = {
  // Latin-1 Supplement block.
  '\\\\xc0': 'A',
  '\\\\xc1': 'A',
  '\\\\xc2': 'A',
  '\\\\xc3': 'A',
  '\\\\xc4': 'A',
  '\\\\xc5': 'A',
  '\\\\xe0': 'a',
  '\\\\xe1': 'a',
  '\\\\xe2': 'a',
  '\\\\xe3': 'a',
  '\\\\xe4': 'a',
  '\\\\xe5': 'a',
  '\\\\xc7': 'C',
  '\\\\xe7': 'c',
  '\\\\xd0': 'D',
  '\\\\xf0': 'd',
  '\\\\xc8': 'E',
  '\\\\xc9': 'E',
  '\\\\xca': 'E',
  '\\\\xcb': 'E',
  '\\\\xe8': 'e',
  '\\\\xe9': 'e',
  '\\\\xea': 'e',
  '\\\\xeb': 'e',
  '\\\\xcc': 'I',
  '\\\\xcd': 'I',
  '\\\\xce': 'I',
  '\\\\xcf': 'I',
  '\\\\xec': 'i',
  '\\\\xed': 'i',
  '\\\\xee': 'i',
  '\\\\xef': 'i',
  '\\\\xd1': 'N',
  '\\\\xf1': 'n',
  '\\\\xd2': 'O',
  '\\\\xd3': 'O',
  '\\\\xd4': 'O',
  '\\\\xd5': 'O',
  '\\\\xd6': 'O',
  '\\\\xd8': 'O',
  '\\\\xf2': 'o',
  '\\\\xf3': 'o',
  '\\\\xf4': 'o',
  '\\\\xf5': 'o',
  '\\\\xf6': 'o',
  '\\\\xf8': 'o',
  '\\\\xd9': 'U',
  '\\\\xda': 'U',
  '\\\\xdb': 'U',
  '\\\\xdc': 'U',
  '\\\\xf9': 'u',
  '\\\\xfa': 'u',
  '\\\\xfb': 'u',
  '\\\\xfc': 'u',
  '\\\\xdd': 'Y',
  '\\\\xfd': 'y',
  '\\\\xff': 'y',
  '\\\\xc6': 'Ae',
  '\\\\xe6': 'ae',
  '\\\\xde': 'Th',
  '\\\\xfe': 'th',
  '\\\\xdf': 'ss',
  // Latin Extended-A block.
  '\\\\u0100': 'A',
  '\\\\u0102': 'A',
  '\\\\u0104': 'A',
  '\\\\u0101': 'a',
  '\\\\u0103': 'a',
  '\\\\u0105': 'a',
  '\\\\u0106': 'C',
  '\\\\u0108': 'C',
  '\\\\u010a': 'C',
  '\\\\u010c': 'C',
  '\\\\u0107': 'c',
  '\\\\u0109': 'c',
  '\\\\u010b': 'c',
  '\\\\u010d': 'c',
  '\\\\u010e': 'D',
  '\\\\u0110': 'D',
  '\\\\u010f': 'd',
  '\\\\u0111': 'd',
  '\\\\u0112': 'E',
  '\\\\u0114': 'E',
  '\\\\u0116': 'E',
  '\\\\u0118': 'E',
  '\\\\u011a': 'E',
  '\\\\u0113': 'e',
  '\\\\u0115': 'e',
  '\\\\u0117': 'e',
  '\\\\u0119': 'e',
  '\\\\u011b': 'e',
  '\\\\u011c': 'G',
  '\\\\u011e': 'G',
  '\\\\u0120': 'G',
  '\\\\u0122': 'G',
  '\\\\u011d': 'g',
  '\\\\u011f': 'g',
  '\\\\u0121': 'g',
  '\\\\u0123': 'g',
  '\\\\u0124': 'H',
  '\\\\u0126': 'H',
  '\\\\u0125': 'h',
  '\\\\u0127': 'h',
  '\\\\u0128': 'I',
  '\\\\u012a': 'I',
  '\\\\u012c': 'I',
  '\\\\u012e': 'I',
  '\\\\u0130': 'I',
  '\\\\u0129': 'i',
  '\\\\u012b': 'i',
  '\\\\u012d': 'i',
  '\\\\u012f': 'i',
  '\\\\u0131': 'i',
  '\\\\u0134': 'J',
  '\\\\u0135': 'j',
  '\\\\u0136': 'K',
  '\\\\u0137': 'k',
  '\\\\u0138': 'k',
  '\\\\u0139': 'L',
  '\\\\u013b': 'L',
  '\\\\u013d': 'L',
  '\\\\u013f': 'L',
  '\\\\u0141': 'L',
  '\\\\u013a': 'l',
  '\\\\u013c': 'l',
  '\\\\u013e': 'l',
  '\\\\u0140': 'l',
  '\\\\u0142': 'l',
  '\\\\u0143': 'N',
  '\\\\u0145': 'N',
  '\\\\u0147': 'N',
  '\\\\u014a': 'N',
  '\\\\u0144': 'n',
  '\\\\u0146': 'n',
  '\\\\u0148': 'n',
  '\\\\u014b': 'n',
  '\\\\u014c': 'O',
  '\\\\u014e': 'O',
  '\\\\u0150': 'O',
  '\\\\u014d': 'o',
  '\\\\u014f': 'o',
  '\\\\u0151': 'o',
  '\\\\u0154': 'R',
  '\\\\u0156': 'R',
  '\\\\u0158': 'R',
  '\\\\u0155': 'r',
  '\\\\u0157': 'r',
  '\\\\u0159': 'r',
  '\\\\u015a': 'S',
  '\\\\u015c': 'S',
  '\\\\u015e': 'S',
  '\\\\u0160': 'S',
  '\\\\u015b': 's',
  '\\\\u015d': 's',
  '\\\\u015f': 's',
  '\\\\u0161': 's',
  '\\\\u0162': 'T',
  '\\\\u0164': 'T',
  '\\\\u0166': 'T',
  '\\\\u0163': 't',
  '\\\\u0165': 't',
  '\\\\u0167': 't',
  '\\\\u0168': 'U',
  '\\\\u016a': 'U',
  '\\\\u016c': 'U',
  '\\\\u016e': 'U',
  '\\\\u0170': 'U',
  '\\\\u0172': 'U',
  '\\\\u0169': 'u',
  '\\\\u016b': 'u',
  '\\\\u016d': 'u',
  '\\\\u016f': 'u',
  '\\\\u0171': 'u',
  '\\\\u0173': 'u',
  '\\\\u0174': 'W',
  '\\\\u0175': 'w',
  '\\\\u0176': 'Y',
  '\\\\u0177': 'y',
  '\\\\u0178': 'Y',
  '\\\\u0179': 'Z',
  '\\\\u017b': 'Z',
  '\\\\u017d': 'Z',
  '\\\\u017a': 'z',
  '\\\\u017c': 'z',
  '\\\\u017e': 'z',
  '\\\\u0132': 'IJ',
  '\\\\u0133': 'ij',
  '\\\\u0152': 'Oe',
  '\\\\u0153': 'oe',
  '\\\\u0149': \\"'n\\",
  '\\\\u017f': 's'
};
/**
 * Used by \`_.deburr\` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */

var deburrLetter = _basePropertyOf(deburredLetters);
var _deburrLetter = deburrLetter;

/** Used to match Latin Unicode letters (excluding mathematical operators). */

var reLatin = /[\\\\xc0-\\\\xd6\\\\xd8-\\\\xf6\\\\xf8-\\\\xff\\\\u0100-\\\\u017f]/g;
/** Used to compose unicode character classes. */

var rsComboMarksRange$2 = '\\\\\\\\u0300-\\\\\\\\u036f',
    reComboHalfMarksRange$2 = '\\\\\\\\ufe20-\\\\\\\\ufe2f',
    rsComboSymbolsRange$2 = '\\\\\\\\u20d0-\\\\\\\\u20ff',
    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;
/** Used to compose unicode capture groups. */

var rsCombo$1 = '[' + rsComboRange$2 + ']';
/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */

var reComboMark = RegExp(rsCombo$1, 'g');
/**
 * Deburrs \`string\` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */

function deburr(string) {
  string = toString_1(string);
  return string && string.replace(reLatin, _deburrLetter).replace(reComboMark, '');
}

var deburr_1 = deburr;

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\x7f]+/g;
/**
 * Splits an ASCII \`string\` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of \`string\`.
 */

function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

var _asciiWords = asciiWords;

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
/**
 * Checks if \`string\` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns \`true\` if a word is found, else \`false\`.
 */

function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

var _hasUnicodeWord = hasUnicodeWord;

/** Used to compose unicode character classes. */
var rsAstralRange$2 = '\\\\\\\\ud800-\\\\\\\\udfff',
    rsComboMarksRange$3 = '\\\\\\\\u0300-\\\\\\\\u036f',
    reComboHalfMarksRange$3 = '\\\\\\\\ufe20-\\\\\\\\ufe2f',
    rsComboSymbolsRange$3 = '\\\\\\\\u20d0-\\\\\\\\u20ff',
    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
    rsDingbatRange = '\\\\\\\\u2700-\\\\\\\\u27bf',
    rsLowerRange = 'a-z\\\\\\\\xdf-\\\\\\\\xf6\\\\\\\\xf8-\\\\\\\\xff',
    rsMathOpRange = '\\\\\\\\xac\\\\\\\\xb1\\\\\\\\xd7\\\\\\\\xf7',
    rsNonCharRange = '\\\\\\\\x00-\\\\\\\\x2f\\\\\\\\x3a-\\\\\\\\x40\\\\\\\\x5b-\\\\\\\\x60\\\\\\\\x7b-\\\\\\\\xbf',
    rsPunctuationRange = '\\\\\\\\u2000-\\\\\\\\u206f',
    rsSpaceRange = ' \\\\\\\\t\\\\\\\\x0b\\\\\\\\f\\\\\\\\xa0\\\\\\\\ufeff\\\\\\\\n\\\\\\\\r\\\\\\\\u2028\\\\\\\\u2029\\\\\\\\u1680\\\\\\\\u180e\\\\\\\\u2000\\\\\\\\u2001\\\\\\\\u2002\\\\\\\\u2003\\\\\\\\u2004\\\\\\\\u2005\\\\\\\\u2006\\\\\\\\u2007\\\\\\\\u2008\\\\\\\\u2009\\\\\\\\u200a\\\\\\\\u202f\\\\\\\\u205f\\\\\\\\u3000',
    rsUpperRange = 'A-Z\\\\\\\\xc0-\\\\\\\\xd6\\\\\\\\xd8-\\\\\\\\xde',
    rsVarRange$2 = '\\\\\\\\ufe0e\\\\\\\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
/** Used to compose unicode capture groups. */

var rsApos = \\"['\\\\u2019]\\",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo$2 = '[' + rsComboRange$3 + ']',
    rsDigits = '\\\\\\\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange$2 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz$1 = '\\\\\\\\ud83c[\\\\\\\\udffb-\\\\\\\\udfff]',
    rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
    rsNonAstral$1 = '[^' + rsAstralRange$2 + ']',
    rsRegional$1 = '(?:\\\\\\\\ud83c[\\\\\\\\udde6-\\\\\\\\uddff]){2}',
    rsSurrPair$1 = '[\\\\\\\\ud800-\\\\\\\\udbff][\\\\\\\\udc00-\\\\\\\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ$2 = '\\\\\\\\u200d';
/** Used to compose unicode regexes. */

var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod$1 = rsModifier$1 + '?',
    rsOptVar$1 = '[' + rsVarRange$2 + ']?',
    rsOptJoin$1 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
    rsOrdLower = '\\\\\\\\d*(?:1st|2nd|3rd|(?![123])\\\\\\\\dth)(?=\\\\\\\\b|[A-Z_])',
    rsOrdUpper = '\\\\\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\\\\\dTH)(?=\\\\\\\\b|[a-z_])',
    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
    rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;
/** Used to match complex or compound words. */

var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
/**
 * Splits a Unicode \`string\` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of \`string\`.
 */

function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

var _unicodeWords = unicodeWords;

/**
 * Splits \`string\` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like \`_.map\`.
 * @returns {Array} Returns the words of \`string\`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */

function words(string, pattern, guard) {
  string = toString_1(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return _hasUnicodeWord(string) ? _unicodeWords(string) : _asciiWords(string);
  }

  return string.match(pattern) || [];
}

var words_1 = words;

/** Used to compose unicode capture groups. */

var rsApos$1 = \\"['\\\\u2019]\\";
/** Used to match apostrophes. */

var reApos = RegExp(rsApos$1, 'g');
/**
 * Creates a function like \`_.camelCase\`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */

function createCompounder(callback) {
  return function (string) {
    return _arrayReduce(words_1(deburr_1(string).replace(reApos, '')), callback, '');
  };
}

var _createCompounder = createCompounder;

/**
 * Converts \`string\` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */

var camelCase = _createCompounder(function (result, word, index) {
  word = word.toLowerCase();
  return result + (index ? capitalize_1(word) : word);
});
var camelCase_1 = camelCase;

function makeCamelCase(string) {
  return camelCase_1(string);
}

export { makeCamelCase };
//# sourceMappingURL=index.esm.js.map
"
`;

exports[`Publish Test File via Babel: umd 1`] = `
"/*! deep-lodash v1.0.0 by Sebastian Werner <s.werner@sebastian-software.de> */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['deep-lodash'] = {}));
}(this, (function (exports) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	/** Detect free variable \`global\` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
	var _freeGlobal = freeGlobal;

	/** Detect free variable \`self\`. */

	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	/** Used as a reference to the global object. */

	var root = _freeGlobal || freeSelf || Function('return this')();
	var _root = root;

	/** Built-in value references. */

	var Symbol = _root.Symbol;
	var _Symbol = Symbol;

	/**
	 * A specialized version of \`_.map\` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }

	  return result;
	}

	var _arrayMap = arrayMap;

	/**
	 * Checks if \`value\` is classified as an \`Array\` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns \`true\` if \`value\` is an array, else \`false\`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;
	var isArray_1 = isArray;

	/** Used for built-in method references. */

	var objectProto = Object.prototype;
	/** Used to check objects for own properties. */

	var hasOwnProperty = objectProto.hasOwnProperty;
	/**
	 * Used to resolve the
	 * [\`toStringTag\`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */

	var nativeObjectToString = objectProto.toString;
	/** Built-in value references. */

	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
	/**
	 * A specialized version of \`baseGetTag\` which ignores \`Symbol.toStringTag\` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw \`toStringTag\`.
	 */

	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);

	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }

	  return result;
	}

	var _getRawTag = getRawTag;

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;
	/**
	 * Used to resolve the
	 * [\`toStringTag\`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */

	var nativeObjectToString$1 = objectProto$1.toString;
	/**
	 * Converts \`value\` to a string using \`Object.prototype.toString\`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */

	function objectToString(value) {
	  return nativeObjectToString$1.call(value);
	}

	var _objectToString = objectToString;

	/** \`Object#toString\` result references. */

	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';
	/** Built-in value references. */

	var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;
	/**
	 * The base implementation of \`getTag\` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the \`toStringTag\`.
	 */

	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }

	  return symToStringTag$1 && symToStringTag$1 in Object(value) ? _getRawTag(value) : _objectToString(value);
	}

	var _baseGetTag = baseGetTag;

	/**
	 * Checks if \`value\` is object-like. A value is object-like if it's not \`null\`
	 * and has a \`typeof\` result of \\"object\\".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns \`true\` if \`value\` is object-like, else \`false\`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	var isObjectLike_1 = isObjectLike;

	/** \`Object#toString\` result references. */

	var symbolTag = '[object Symbol]';
	/**
	 * Checks if \`value\` is classified as a \`Symbol\` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns \`true\` if \`value\` is a symbol, else \`false\`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */

	function isSymbol(value) {
	  return typeof value == 'symbol' || isObjectLike_1(value) && _baseGetTag(value) == symbolTag;
	}

	var isSymbol_1 = isSymbol;

	/** Used as references for various \`Number\` constants. */

	var INFINITY = 1 / 0;
	/** Used to convert symbols to primitives and strings. */

	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;
	/**
	 * The base implementation of \`_.toString\` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */

	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }

	  if (isArray_1(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return _arrayMap(value, baseToString) + '';
	  }

	  if (isSymbol_1(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }

	  var result = value + '';
	  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
	}

	var _baseToString = baseToString;

	/**
	 * Converts \`value\` to a string. An empty string is returned for \`null\`
	 * and \`undefined\` values. The sign of \`-0\` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */

	function toString(value) {
	  return value == null ? '' : _baseToString(value);
	}

	var toString_1 = toString;

	/**
	 * The base implementation of \`_.slice\` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of \`array\`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : length + start;
	  }

	  end = end > length ? length : end;

	  if (end < 0) {
	    end += length;
	  }

	  length = start > end ? 0 : end - start >>> 0;
	  start >>>= 0;
	  var result = Array(length);

	  while (++index < length) {
	    result[index] = array[index + start];
	  }

	  return result;
	}

	var _baseSlice = baseSlice;

	/**
	 * Casts \`array\` to a slice if it's needed.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {number} start The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the cast slice.
	 */

	function castSlice(array, start, end) {
	  var length = array.length;
	  end = end === undefined ? length : end;
	  return !start && end >= length ? array : _baseSlice(array, start, end);
	}

	var _castSlice = castSlice;

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\\\\\\\ud800-\\\\\\\\udfff',
	    rsComboMarksRange = '\\\\\\\\u0300-\\\\\\\\u036f',
	    reComboHalfMarksRange = '\\\\\\\\ufe20-\\\\\\\\ufe2f',
	    rsComboSymbolsRange = '\\\\\\\\u20d0-\\\\\\\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsVarRange = '\\\\\\\\ufe0e\\\\\\\\ufe0f';
	/** Used to compose unicode capture groups. */

	var rsZWJ = '\\\\\\\\u200d';
	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

	var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
	/**
	 * Checks if \`string\` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns \`true\` if a symbol is found, else \`false\`.
	 */

	function hasUnicode(string) {
	  return reHasUnicode.test(string);
	}

	var _hasUnicode = hasUnicode;

	/**
	 * Converts an ASCII \`string\` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function asciiToArray(string) {
	  return string.split('');
	}

	var _asciiToArray = asciiToArray;

	/** Used to compose unicode character classes. */
	var rsAstralRange$1 = '\\\\\\\\ud800-\\\\\\\\udfff',
	    rsComboMarksRange$1 = '\\\\\\\\u0300-\\\\\\\\u036f',
	    reComboHalfMarksRange$1 = '\\\\\\\\ufe20-\\\\\\\\ufe2f',
	    rsComboSymbolsRange$1 = '\\\\\\\\u20d0-\\\\\\\\u20ff',
	    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
	    rsVarRange$1 = '\\\\\\\\ufe0e\\\\\\\\ufe0f';
	/** Used to compose unicode capture groups. */

	var rsAstral = '[' + rsAstralRange$1 + ']',
	    rsCombo = '[' + rsComboRange$1 + ']',
	    rsFitz = '\\\\\\\\ud83c[\\\\\\\\udffb-\\\\\\\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange$1 + ']',
	    rsRegional = '(?:\\\\\\\\ud83c[\\\\\\\\udde6-\\\\\\\\uddff]){2}',
	    rsSurrPair = '[\\\\\\\\ud800-\\\\\\\\udbff][\\\\\\\\udc00-\\\\\\\\udfff]',
	    rsZWJ$1 = '\\\\\\\\u200d';
	/** Used to compose unicode regexes. */

	var reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange$1 + ']?',
	    rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
	/**
	 * Converts a Unicode \`string\` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */

	function unicodeToArray(string) {
	  return string.match(reUnicode) || [];
	}

	var _unicodeToArray = unicodeToArray;

	/**
	 * Converts \`string\` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */

	function stringToArray(string) {
	  return _hasUnicode(string) ? _unicodeToArray(string) : _asciiToArray(string);
	}

	var _stringToArray = stringToArray;

	/**
	 * Creates a function like \`_.lowerFirst\`.
	 *
	 * @private
	 * @param {string} methodName The name of the \`String\` case method to use.
	 * @returns {Function} Returns the new case function.
	 */

	function createCaseFirst(methodName) {
	  return function (string) {
	    string = toString_1(string);
	    var strSymbols = _hasUnicode(string) ? _stringToArray(string) : undefined;
	    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
	    var trailing = strSymbols ? _castSlice(strSymbols, 1).join('') : string.slice(1);
	    return chr[methodName]() + trailing;
	  };
	}

	var _createCaseFirst = createCaseFirst;

	/**
	 * Converts the first character of \`string\` to upper case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.upperFirst('fred');
	 * // => 'Fred'
	 *
	 * _.upperFirst('FRED');
	 * // => 'FRED'
	 */

	var upperFirst = _createCaseFirst('toUpperCase');
	var upperFirst_1 = upperFirst;

	/**
	 * Converts the first character of \`string\` to upper case and the remaining
	 * to lower case.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to capitalize.
	 * @returns {string} Returns the capitalized string.
	 * @example
	 *
	 * _.capitalize('FRED');
	 * // => 'Fred'
	 */

	function capitalize(string) {
	  return upperFirst_1(toString_1(string).toLowerCase());
	}

	var capitalize_1 = capitalize;

	/**
	 * A specialized version of \`_.reduce\` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of \`array\` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }

	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }

	  return accumulator;
	}

	var _arrayReduce = arrayReduce;

	/**
	 * The base implementation of \`_.propertyOf\` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyOf(object) {
	  return function (key) {
	    return object == null ? undefined : object[key];
	  };
	}

	var _basePropertyOf = basePropertyOf;

	/** Used to map Latin Unicode letters to basic Latin letters. */

	var deburredLetters = {
	  // Latin-1 Supplement block.
	  '\\\\xc0': 'A',
	  '\\\\xc1': 'A',
	  '\\\\xc2': 'A',
	  '\\\\xc3': 'A',
	  '\\\\xc4': 'A',
	  '\\\\xc5': 'A',
	  '\\\\xe0': 'a',
	  '\\\\xe1': 'a',
	  '\\\\xe2': 'a',
	  '\\\\xe3': 'a',
	  '\\\\xe4': 'a',
	  '\\\\xe5': 'a',
	  '\\\\xc7': 'C',
	  '\\\\xe7': 'c',
	  '\\\\xd0': 'D',
	  '\\\\xf0': 'd',
	  '\\\\xc8': 'E',
	  '\\\\xc9': 'E',
	  '\\\\xca': 'E',
	  '\\\\xcb': 'E',
	  '\\\\xe8': 'e',
	  '\\\\xe9': 'e',
	  '\\\\xea': 'e',
	  '\\\\xeb': 'e',
	  '\\\\xcc': 'I',
	  '\\\\xcd': 'I',
	  '\\\\xce': 'I',
	  '\\\\xcf': 'I',
	  '\\\\xec': 'i',
	  '\\\\xed': 'i',
	  '\\\\xee': 'i',
	  '\\\\xef': 'i',
	  '\\\\xd1': 'N',
	  '\\\\xf1': 'n',
	  '\\\\xd2': 'O',
	  '\\\\xd3': 'O',
	  '\\\\xd4': 'O',
	  '\\\\xd5': 'O',
	  '\\\\xd6': 'O',
	  '\\\\xd8': 'O',
	  '\\\\xf2': 'o',
	  '\\\\xf3': 'o',
	  '\\\\xf4': 'o',
	  '\\\\xf5': 'o',
	  '\\\\xf6': 'o',
	  '\\\\xf8': 'o',
	  '\\\\xd9': 'U',
	  '\\\\xda': 'U',
	  '\\\\xdb': 'U',
	  '\\\\xdc': 'U',
	  '\\\\xf9': 'u',
	  '\\\\xfa': 'u',
	  '\\\\xfb': 'u',
	  '\\\\xfc': 'u',
	  '\\\\xdd': 'Y',
	  '\\\\xfd': 'y',
	  '\\\\xff': 'y',
	  '\\\\xc6': 'Ae',
	  '\\\\xe6': 'ae',
	  '\\\\xde': 'Th',
	  '\\\\xfe': 'th',
	  '\\\\xdf': 'ss',
	  // Latin Extended-A block.
	  '\\\\u0100': 'A',
	  '\\\\u0102': 'A',
	  '\\\\u0104': 'A',
	  '\\\\u0101': 'a',
	  '\\\\u0103': 'a',
	  '\\\\u0105': 'a',
	  '\\\\u0106': 'C',
	  '\\\\u0108': 'C',
	  '\\\\u010a': 'C',
	  '\\\\u010c': 'C',
	  '\\\\u0107': 'c',
	  '\\\\u0109': 'c',
	  '\\\\u010b': 'c',
	  '\\\\u010d': 'c',
	  '\\\\u010e': 'D',
	  '\\\\u0110': 'D',
	  '\\\\u010f': 'd',
	  '\\\\u0111': 'd',
	  '\\\\u0112': 'E',
	  '\\\\u0114': 'E',
	  '\\\\u0116': 'E',
	  '\\\\u0118': 'E',
	  '\\\\u011a': 'E',
	  '\\\\u0113': 'e',
	  '\\\\u0115': 'e',
	  '\\\\u0117': 'e',
	  '\\\\u0119': 'e',
	  '\\\\u011b': 'e',
	  '\\\\u011c': 'G',
	  '\\\\u011e': 'G',
	  '\\\\u0120': 'G',
	  '\\\\u0122': 'G',
	  '\\\\u011d': 'g',
	  '\\\\u011f': 'g',
	  '\\\\u0121': 'g',
	  '\\\\u0123': 'g',
	  '\\\\u0124': 'H',
	  '\\\\u0126': 'H',
	  '\\\\u0125': 'h',
	  '\\\\u0127': 'h',
	  '\\\\u0128': 'I',
	  '\\\\u012a': 'I',
	  '\\\\u012c': 'I',
	  '\\\\u012e': 'I',
	  '\\\\u0130': 'I',
	  '\\\\u0129': 'i',
	  '\\\\u012b': 'i',
	  '\\\\u012d': 'i',
	  '\\\\u012f': 'i',
	  '\\\\u0131': 'i',
	  '\\\\u0134': 'J',
	  '\\\\u0135': 'j',
	  '\\\\u0136': 'K',
	  '\\\\u0137': 'k',
	  '\\\\u0138': 'k',
	  '\\\\u0139': 'L',
	  '\\\\u013b': 'L',
	  '\\\\u013d': 'L',
	  '\\\\u013f': 'L',
	  '\\\\u0141': 'L',
	  '\\\\u013a': 'l',
	  '\\\\u013c': 'l',
	  '\\\\u013e': 'l',
	  '\\\\u0140': 'l',
	  '\\\\u0142': 'l',
	  '\\\\u0143': 'N',
	  '\\\\u0145': 'N',
	  '\\\\u0147': 'N',
	  '\\\\u014a': 'N',
	  '\\\\u0144': 'n',
	  '\\\\u0146': 'n',
	  '\\\\u0148': 'n',
	  '\\\\u014b': 'n',
	  '\\\\u014c': 'O',
	  '\\\\u014e': 'O',
	  '\\\\u0150': 'O',
	  '\\\\u014d': 'o',
	  '\\\\u014f': 'o',
	  '\\\\u0151': 'o',
	  '\\\\u0154': 'R',
	  '\\\\u0156': 'R',
	  '\\\\u0158': 'R',
	  '\\\\u0155': 'r',
	  '\\\\u0157': 'r',
	  '\\\\u0159': 'r',
	  '\\\\u015a': 'S',
	  '\\\\u015c': 'S',
	  '\\\\u015e': 'S',
	  '\\\\u0160': 'S',
	  '\\\\u015b': 's',
	  '\\\\u015d': 's',
	  '\\\\u015f': 's',
	  '\\\\u0161': 's',
	  '\\\\u0162': 'T',
	  '\\\\u0164': 'T',
	  '\\\\u0166': 'T',
	  '\\\\u0163': 't',
	  '\\\\u0165': 't',
	  '\\\\u0167': 't',
	  '\\\\u0168': 'U',
	  '\\\\u016a': 'U',
	  '\\\\u016c': 'U',
	  '\\\\u016e': 'U',
	  '\\\\u0170': 'U',
	  '\\\\u0172': 'U',
	  '\\\\u0169': 'u',
	  '\\\\u016b': 'u',
	  '\\\\u016d': 'u',
	  '\\\\u016f': 'u',
	  '\\\\u0171': 'u',
	  '\\\\u0173': 'u',
	  '\\\\u0174': 'W',
	  '\\\\u0175': 'w',
	  '\\\\u0176': 'Y',
	  '\\\\u0177': 'y',
	  '\\\\u0178': 'Y',
	  '\\\\u0179': 'Z',
	  '\\\\u017b': 'Z',
	  '\\\\u017d': 'Z',
	  '\\\\u017a': 'z',
	  '\\\\u017c': 'z',
	  '\\\\u017e': 'z',
	  '\\\\u0132': 'IJ',
	  '\\\\u0133': 'ij',
	  '\\\\u0152': 'Oe',
	  '\\\\u0153': 'oe',
	  '\\\\u0149': \\"'n\\",
	  '\\\\u017f': 's'
	};
	/**
	 * Used by \`_.deburr\` to convert Latin-1 Supplement and Latin Extended-A
	 * letters to basic Latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */

	var deburrLetter = _basePropertyOf(deburredLetters);
	var _deburrLetter = deburrLetter;

	/** Used to match Latin Unicode letters (excluding mathematical operators). */

	var reLatin = /[\\\\xc0-\\\\xd6\\\\xd8-\\\\xf6\\\\xf8-\\\\xff\\\\u0100-\\\\u017f]/g;
	/** Used to compose unicode character classes. */

	var rsComboMarksRange$2 = '\\\\\\\\u0300-\\\\\\\\u036f',
	    reComboHalfMarksRange$2 = '\\\\\\\\ufe20-\\\\\\\\ufe2f',
	    rsComboSymbolsRange$2 = '\\\\\\\\u20d0-\\\\\\\\u20ff',
	    rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;
	/** Used to compose unicode capture groups. */

	var rsCombo$1 = '[' + rsComboRange$2 + ']';
	/**
	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	 */

	var reComboMark = RegExp(rsCombo$1, 'g');
	/**
	 * Deburrs \`string\` by converting
	 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	 * letters to basic Latin letters and removing
	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */

	function deburr(string) {
	  string = toString_1(string);
	  return string && string.replace(reLatin, _deburrLetter).replace(reComboMark, '');
	}

	var deburr_1 = deburr;

	/** Used to match words composed of alphanumeric characters. */
	var reAsciiWord = /[^\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\x7f]+/g;
	/**
	 * Splits an ASCII \`string\` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of \`string\`.
	 */

	function asciiWords(string) {
	  return string.match(reAsciiWord) || [];
	}

	var _asciiWords = asciiWords;

	/** Used to detect strings that need a more robust regexp to match words. */
	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
	/**
	 * Checks if \`string\` contains a word composed of Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns \`true\` if a word is found, else \`false\`.
	 */

	function hasUnicodeWord(string) {
	  return reHasUnicodeWord.test(string);
	}

	var _hasUnicodeWord = hasUnicodeWord;

	/** Used to compose unicode character classes. */
	var rsAstralRange$2 = '\\\\\\\\ud800-\\\\\\\\udfff',
	    rsComboMarksRange$3 = '\\\\\\\\u0300-\\\\\\\\u036f',
	    reComboHalfMarksRange$3 = '\\\\\\\\ufe20-\\\\\\\\ufe2f',
	    rsComboSymbolsRange$3 = '\\\\\\\\u20d0-\\\\\\\\u20ff',
	    rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
	    rsDingbatRange = '\\\\\\\\u2700-\\\\\\\\u27bf',
	    rsLowerRange = 'a-z\\\\\\\\xdf-\\\\\\\\xf6\\\\\\\\xf8-\\\\\\\\xff',
	    rsMathOpRange = '\\\\\\\\xac\\\\\\\\xb1\\\\\\\\xd7\\\\\\\\xf7',
	    rsNonCharRange = '\\\\\\\\x00-\\\\\\\\x2f\\\\\\\\x3a-\\\\\\\\x40\\\\\\\\x5b-\\\\\\\\x60\\\\\\\\x7b-\\\\\\\\xbf',
	    rsPunctuationRange = '\\\\\\\\u2000-\\\\\\\\u206f',
	    rsSpaceRange = ' \\\\\\\\t\\\\\\\\x0b\\\\\\\\f\\\\\\\\xa0\\\\\\\\ufeff\\\\\\\\n\\\\\\\\r\\\\\\\\u2028\\\\\\\\u2029\\\\\\\\u1680\\\\\\\\u180e\\\\\\\\u2000\\\\\\\\u2001\\\\\\\\u2002\\\\\\\\u2003\\\\\\\\u2004\\\\\\\\u2005\\\\\\\\u2006\\\\\\\\u2007\\\\\\\\u2008\\\\\\\\u2009\\\\\\\\u200a\\\\\\\\u202f\\\\\\\\u205f\\\\\\\\u3000',
	    rsUpperRange = 'A-Z\\\\\\\\xc0-\\\\\\\\xd6\\\\\\\\xd8-\\\\\\\\xde',
	    rsVarRange$2 = '\\\\\\\\ufe0e\\\\\\\\ufe0f',
	    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
	/** Used to compose unicode capture groups. */

	var rsApos = \\"['\\\\u2019]\\",
	    rsBreak = '[' + rsBreakRange + ']',
	    rsCombo$2 = '[' + rsComboRange$3 + ']',
	    rsDigits = '\\\\\\\\d+',
	    rsDingbat = '[' + rsDingbatRange + ']',
	    rsLower = '[' + rsLowerRange + ']',
	    rsMisc = '[^' + rsAstralRange$2 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	    rsFitz$1 = '\\\\\\\\ud83c[\\\\\\\\udffb-\\\\\\\\udfff]',
	    rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
	    rsNonAstral$1 = '[^' + rsAstralRange$2 + ']',
	    rsRegional$1 = '(?:\\\\\\\\ud83c[\\\\\\\\udde6-\\\\\\\\uddff]){2}',
	    rsSurrPair$1 = '[\\\\\\\\ud800-\\\\\\\\udbff][\\\\\\\\udc00-\\\\\\\\udfff]',
	    rsUpper = '[' + rsUpperRange + ']',
	    rsZWJ$2 = '\\\\\\\\u200d';
	/** Used to compose unicode regexes. */

	var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	    reOptMod$1 = rsModifier$1 + '?',
	    rsOptVar$1 = '[' + rsVarRange$2 + ']?',
	    rsOptJoin$1 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
	    rsOrdLower = '\\\\\\\\d*(?:1st|2nd|3rd|(?![123])\\\\\\\\dth)(?=\\\\\\\\b|[A-Z_])',
	    rsOrdUpper = '\\\\\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\\\\\dTH)(?=\\\\\\\\b|[a-z_])',
	    rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
	    rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;
	/** Used to match complex or compound words. */

	var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
	/**
	 * Splits a Unicode \`string\` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of \`string\`.
	 */

	function unicodeWords(string) {
	  return string.match(reUnicodeWord) || [];
	}

	var _unicodeWords = unicodeWords;

	/**
	 * Splits \`string\` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like \`_.map\`.
	 * @returns {Array} Returns the words of \`string\`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */

	function words(string, pattern, guard) {
	  string = toString_1(string);
	  pattern = guard ? undefined : pattern;

	  if (pattern === undefined) {
	    return _hasUnicodeWord(string) ? _unicodeWords(string) : _asciiWords(string);
	  }

	  return string.match(pattern) || [];
	}

	var words_1 = words;

	/** Used to compose unicode capture groups. */

	var rsApos$1 = \\"['\\\\u2019]\\";
	/** Used to match apostrophes. */

	var reApos = RegExp(rsApos$1, 'g');
	/**
	 * Creates a function like \`_.camelCase\`.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */

	function createCompounder(callback) {
	  return function (string) {
	    return _arrayReduce(words_1(deburr_1(string).replace(reApos, '')), callback, '');
	  };
	}

	var _createCompounder = createCompounder;

	/**
	 * Converts \`string\` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the camel cased string.
	 * @example
	 *
	 * _.camelCase('Foo Bar');
	 * // => 'fooBar'
	 *
	 * _.camelCase('--foo-bar--');
	 * // => 'fooBar'
	 *
	 * _.camelCase('__FOO_BAR__');
	 * // => 'fooBar'
	 */

	var camelCase = _createCompounder(function (result, word, index) {
	  word = word.toLowerCase();
	  return result + (index ? capitalize_1(word) : word);
	});
	var camelCase_1 = camelCase;

	function makeCamelCase(string) {
	  return camelCase_1(string);
	}

	exports.makeCamelCase = makeCamelCase;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.umd.js.map
"
`;
