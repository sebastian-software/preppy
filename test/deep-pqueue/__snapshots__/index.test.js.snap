// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Publish Test File via Babel: cjs 1`] = `
"/*! deep-pqueue v1.0.0 by Sebastian Werner <s.werner@sebastian-software.de> */
'use strict';

var eventemitter3 = {exports: {}};

(function (module) {

  var has = Object.prototype.hasOwnProperty,
      prefix = '~';
  /**
   * Constructor to create a storage for our \`EE\` objects.
   * An \`Events\` instance is a plain object whose properties are event names.
   *
   * @constructor
   * @private
   */

  function Events() {} //
  // We try to not inherit from \`Object.prototype\`. In some engines creating an
  // instance in this way is faster than calling \`Object.create(null)\` directly.
  // If \`Object.create(null)\` is not supported we prefix the event names with a
  // character to make sure that the built-in object properties are not
  // overridden or used as an attack vector.
  //


  if (Object.create) {
    Events.prototype = Object.create(null); //
    // This hack is needed because the \`__proto__\` property is still inherited in
    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    //

    if (!new Events().__proto__) prefix = false;
  }
  /**
   * Representation of a single event listener.
   *
   * @param {Function} fn The listener function.
   * @param {*} context The context to invoke the listener with.
   * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
   * @constructor
   * @private
   */


  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }
  /**
   * Add a listener for a given event.
   *
   * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} context The context to invoke the listener with.
   * @param {Boolean} once Specify if the listener is a one-time listener.
   * @returns {EventEmitter}
   * @private
   */


  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== 'function') {
      throw new TypeError('The listener must be a function');
    }

    var listener = new EE(fn, context || emitter, once),
        evt = prefix ? prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
    return emitter;
  }
  /**
   * Clear event by name.
   *
   * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
   * @param {(String|Symbol)} evt The Event name.
   * @private
   */


  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
  }
  /**
   * Minimal \`EventEmitter\` interface that is molded against the Node.js
   * \`EventEmitter\` interface.
   *
   * @constructor
   * @public
   */


  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }
  /**
   * Return an array listing the events for which the emitter has registered
   * listeners.
   *
   * @returns {Array}
   * @public
   */


  EventEmitter.prototype.eventNames = function eventNames() {
    var names = [],
        events,
        name;
    if (this._eventsCount === 0) return names;

    for (name in events = this._events) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };
  /**
   * Return the listeners registered for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Array} The registered listeners.
   * @public
   */


  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event,
        handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];

    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }

    return ee;
  };
  /**
   * Return the number of listeners listening to a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Number} The number of listeners.
   * @public
   */


  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event,
        listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };
  /**
   * Calls each of the listeners registered for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Boolean} \`true\` if the event had listeners, else \`false\`.
   * @public
   */


  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt],
        len = arguments.length,
        args,
        i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;

        case 2:
          return listeners.fn.call(listeners.context, a1), true;

        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;

        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;

        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length,
          j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;

          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;

          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;

          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;

          default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
              args[j - 1] = arguments[j];
            }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };
  /**
   * Add a listener for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} \`this\`.
   * @public
   */


  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };
  /**
   * Add a one-time listener for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} \`this\`.
   * @public
   */


  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };
  /**
   * Remove the listeners of a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn Only remove the listeners that match this function.
   * @param {*} context Only remove the listeners that have this context.
   * @param {Boolean} once Only remove one-time listeners.
   * @returns {EventEmitter} \`this\`.
   * @public
   */


  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return this;

    if (!fn) {
      clearEvent(this, evt);
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events.push(listeners[i]);
        }
      } //
      // Reset the array, or remove it completely if we have no more listeners.
      //


      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
    }

    return this;
  };
  /**
   * Remove all listeners, or those of the specified event.
   *
   * @param {(String|Symbol)} [event] The event name.
   * @returns {EventEmitter} \`this\`.
   * @public
   */


  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  }; //
  // Alias methods names because people roll like that.
  //


  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on; //
  // Expose the prefix.
  //

  EventEmitter.prefixed = prefix; //
  // Allow \`EventEmitter\` to be imported as module namespace.
  //

  EventEmitter.EventEmitter = EventEmitter; //
  // Expose the module.
  //

  {
    module.exports = EventEmitter;
  }
})(eventemitter3);

var EventEmitter = eventemitter3.exports;

class TimeoutError extends Error {
  constructor(message) {
    super(message);
    this.name = 'TimeoutError';
  }

}
function pTimeout(promise, milliseconds, fallback, options) {
  let timer;
  const cancelablePromise = new Promise((resolve, reject) => {
    if (typeof milliseconds !== 'number' || Math.sign(milliseconds) !== 1) {
      throw new TypeError(\`Expected \\\\\`milliseconds\\\\\` to be a positive number, got \\\\\`\${milliseconds}\\\\\`\`);
    }

    if (milliseconds === Number.POSITIVE_INFINITY) {
      resolve(promise);
      return;
    }

    options = {
      customTimers: {
        setTimeout,
        clearTimeout
      },
      ...options
    };
    timer = options.customTimers.setTimeout.call(undefined, () => {
      if (typeof fallback === 'function') {
        try {
          resolve(fallback());
        } catch (error) {
          reject(error);
        }

        return;
      }

      const message = typeof fallback === 'string' ? fallback : \`Promise timed out after \${milliseconds} milliseconds\`;
      const timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);

      if (typeof promise.cancel === 'function') {
        promise.cancel();
      }

      reject(timeoutError);
    }, milliseconds);

    (async () => {
      try {
        resolve(await promise);
      } catch (error) {
        reject(error);
      } finally {
        options.customTimers.clearTimeout.call(undefined, timer);
      }
    })();
  });

  cancelablePromise.clear = () => {
    clearTimeout(timer);
    timer = undefined;
  };

  return cancelablePromise;
}

// Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound
// Used to compute insertion index to keep queue sorted after insertion
function lowerBound(array, value, comparator) {
  let first = 0;
  let count = array.length;

  while (count > 0) {
    const step = Math.trunc(count / 2);
    let it = first + step;

    if (comparator(array[it], value) <= 0) {
      first = ++it;
      count -= step + 1;
    } else {
      count = step;
    }
  }

  return first;
}

class PriorityQueue {
  constructor() {
    Object.defineProperty(this, \\"_queue\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
  }

  enqueue(run, options) {
    var _a;

    options = {
      priority: 0,
      ...options
    };
    const element = {
      priority: options.priority,
      run
    };

    if (this.size && ((_a = this._queue[this.size - 1]) === null || _a === void 0 ? void 0 : _a.priority) >= options.priority) {
      this._queue.push(element);

      return;
    }

    const index = lowerBound(this._queue, element, (a, b) => b.priority - a.priority);

    this._queue.splice(index, 0, element);
  }

  dequeue() {
    const item = this._queue.shift();

    return item === null || item === void 0 ? void 0 : item.run;
  }

  filter(options) {
    return this._queue.filter(element => element.priority === options.priority).map(element => element.run);
  }

  get size() {
    return this._queue.length;
  }

}

const empty = () => {};

const timeoutError = new TimeoutError();
/**
Promise queue with concurrency control.
*/

class PQueue extends EventEmitter {
  constructor(options) {
    var _a, _b, _c, _d;

    super();
    Object.defineProperty(this, \\"_carryoverConcurrencyCount\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_isIntervalIgnored\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_intervalCount\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, \\"_intervalCap\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_interval\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_intervalEnd\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, \\"_intervalId\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_timeoutId\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_queue\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_queueClass\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_pendingCount\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    }); // The \`!\` is needed because of https://github.com/microsoft/TypeScript/issues/32194

    Object.defineProperty(this, \\"_concurrency\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_isPaused\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_resolveEmpty\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: empty
    });
    Object.defineProperty(this, \\"_resolveIdle\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: empty
    });
    Object.defineProperty(this, \\"_timeout\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_throwOnTimeout\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }); // eslint-disable-next-line @typescript-eslint/consistent-type-assertions

    options = {
      carryoverConcurrencyCount: false,
      intervalCap: Number.POSITIVE_INFINITY,
      interval: 0,
      concurrency: Number.POSITIVE_INFINITY,
      autoStart: true,
      queueClass: PriorityQueue,
      ...options
    };

    if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {
      throw new TypeError(\`Expected \\\\\`intervalCap\\\\\` to be a number from 1 and up, got \\\\\`\${(_b = (_a = options.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ''}\\\\\` (\${typeof options.intervalCap})\`);
    }

    if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {
      throw new TypeError(\`Expected \\\\\`interval\\\\\` to be a finite number >= 0, got \\\\\`\${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''}\\\\\` (\${typeof options.interval})\`);
    }

    this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
    this._isIntervalIgnored = options.intervalCap === Number.POSITIVE_INFINITY || options.interval === 0;
    this._intervalCap = options.intervalCap;
    this._interval = options.interval;
    this._queue = new options.queueClass();
    this._queueClass = options.queueClass;
    this.concurrency = options.concurrency;
    this._timeout = options.timeout;
    this._throwOnTimeout = options.throwOnTimeout === true;
    this._isPaused = options.autoStart === false;
  }

  get _doesIntervalAllowAnother() {
    return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
  }

  get _doesConcurrentAllowAnother() {
    return this._pendingCount < this._concurrency;
  }

  _next() {
    this._pendingCount--;

    this._tryToStartAnother();

    this.emit('next');
  }

  _resolvePromises() {
    this._resolveEmpty();

    this._resolveEmpty = empty;

    if (this._pendingCount === 0) {
      this._resolveIdle();

      this._resolveIdle = empty;
      this.emit('idle');
    }
  }

  _onResumeInterval() {
    this._onInterval();

    this._initializeIntervalIfNeeded();

    this._timeoutId = undefined;
  }

  _isIntervalPaused() {
    const now = Date.now();

    if (this._intervalId === undefined) {
      const delay = this._intervalEnd - now;

      if (delay < 0) {
        // Act as the interval was done
        // We don't need to resume it here because it will be resumed on line 160
        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
      } else {
        // Act as the interval is pending
        if (this._timeoutId === undefined) {
          this._timeoutId = setTimeout(() => {
            this._onResumeInterval();
          }, delay);
        }

        return true;
      }
    }

    return false;
  }

  _tryToStartAnother() {
    if (this._queue.size === 0) {
      // We can clear the interval (\\"pause\\")
      // Because we can redo it later (\\"resume\\")
      if (this._intervalId) {
        clearInterval(this._intervalId);
      }

      this._intervalId = undefined;

      this._resolvePromises();

      return false;
    }

    if (!this._isPaused) {
      const canInitializeInterval = !this._isIntervalPaused();

      if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
        const job = this._queue.dequeue();

        if (!job) {
          return false;
        }

        this.emit('active');
        job();

        if (canInitializeInterval) {
          this._initializeIntervalIfNeeded();
        }

        return true;
      }
    }

    return false;
  }

  _initializeIntervalIfNeeded() {
    if (this._isIntervalIgnored || this._intervalId !== undefined) {
      return;
    }

    this._intervalId = setInterval(() => {
      this._onInterval();
    }, this._interval);
    this._intervalEnd = Date.now() + this._interval;
  }

  _onInterval() {
    if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
      clearInterval(this._intervalId);
      this._intervalId = undefined;
    }

    this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;

    this._processQueue();
  }
  /**
  Executes all queued functions until it reaches the limit.
  */


  _processQueue() {
    // eslint-disable-next-line no-empty
    while (this._tryToStartAnother()) {}
  }

  get concurrency() {
    return this._concurrency;
  }

  set concurrency(newConcurrency) {
    if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {
      throw new TypeError(\`Expected \\\\\`concurrency\\\\\` to be a number from 1 and up, got \\\\\`\${newConcurrency}\\\\\` (\${typeof newConcurrency})\`);
    }

    this._concurrency = newConcurrency;

    this._processQueue();
  }
  /**
  Adds a sync or async task to the queue. Always returns a promise.
  */


  async add(fn, options = {}) {
    return new Promise((resolve, reject) => {
      const run = async () => {
        this._pendingCount++;
        this._intervalCount++;

        try {
          const operation = this._timeout === undefined && options.timeout === undefined ? fn() : pTimeout(Promise.resolve(fn()), options.timeout === undefined ? this._timeout : options.timeout, () => {
            if (options.throwOnTimeout === undefined ? this._throwOnTimeout : options.throwOnTimeout) {
              reject(timeoutError);
            }

            return undefined;
          });
          const result = await operation;
          resolve(result);
          this.emit('completed', result);
        } catch (error) {
          reject(error);
          this.emit('error', error);
        }

        this._next();
      };

      this._queue.enqueue(run, options);

      this._tryToStartAnother();

      this.emit('add');
    });
  }
  /**
  Same as \`.add()\`, but accepts an array of sync or async functions.
   @returns A promise that resolves when all functions are resolved.
  */


  async addAll(functions, options) {
    return Promise.all(functions.map(async function_ => this.add(function_, options)));
  }
  /**
  Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via \`options.autoStart = false\` or by \`.pause()\` method.)
  */


  start() {
    if (!this._isPaused) {
      return this;
    }

    this._isPaused = false;

    this._processQueue();

    return this;
  }
  /**
  Put queue execution on hold.
  */


  pause() {
    this._isPaused = true;
  }
  /**
  Clear the queue.
  */


  clear() {
    this._queue = new this._queueClass();
  }
  /**
  Can be called multiple times. Useful if you for example add additional items at a later time.
   @returns A promise that settles when the queue becomes empty.
  */


  async onEmpty() {
    // Instantly resolve if the queue is empty
    if (this._queue.size === 0) {
      return;
    }

    return new Promise(resolve => {
      const existingResolve = this._resolveEmpty;

      this._resolveEmpty = () => {
        existingResolve();
        resolve();
      };
    });
  }
  /**
  @returns A promise that settles when the queue size is less than the given limit: \`queue.size < limit\`.
   If you want to avoid having the queue grow beyond a certain size you can \`await queue.onSizeLessThan()\` before adding a new item.
   Note that this only limits the number of items waiting to start. There could still be up to \`concurrency\` jobs already running that this call does not include in its calculation.
  */


  async onSizeLessThan(limit) {
    // Instantly resolve if the queue is empty.
    if (this._queue.size < limit) {
      return;
    }

    return new Promise(resolve => {
      const listener = () => {
        if (this._queue.size < limit) {
          this.removeListener('next', listener);
          resolve();
        }
      };

      this.on('next', listener);
    });
  }
  /**
  The difference with \`.onEmpty\` is that \`.onIdle\` guarantees that all work from the queue has finished. \`.onEmpty\` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.
   @returns A promise that settles when the queue becomes empty, and all promises have completed; \`queue.size === 0 && queue.pending === 0\`.
  */


  async onIdle() {
    // Instantly resolve if none pending and if nothing else is queued
    if (this._pendingCount === 0 && this._queue.size === 0) {
      return;
    }

    return new Promise(resolve => {
      const existingResolve = this._resolveIdle;

      this._resolveIdle = () => {
        existingResolve();
        resolve();
      };
    });
  }
  /**
  Size of the queue, the number of queued items waiting to run.
  */


  get size() {
    return this._queue.size;
  }
  /**
  Size of the queue, filtered by the given options.
   For example, this can be used to find the number of items remaining in the queue with a specific priority level.
  */


  sizeBy(options) {
    // eslint-disable-next-line unicorn/no-array-callback-reference
    return this._queue.filter(options).length;
  }
  /**
  Number of running items (no longer in the queue).
  */


  get pending() {
    return this._pendingCount;
  }
  /**
  Whether the queue is currently paused.
  */


  get isPaused() {
    return this._isPaused;
  }

  get timeout() {
    return this._timeout;
  }
  /**
  Set the timeout for future operations.
  */


  set timeout(milliseconds) {
    this._timeout = milliseconds;
  }

}

async function helper() {
  console.log(\\"Async helper\\");
}

async function main() {
  const queue = new PQueue();
  queue.add(await helper());
}

main();
//# sourceMappingURL=index.cjs.js.map
"
`;

exports[`Publish Test File via Babel: esm 1`] = `
"/*! deep-pqueue v1.0.0 by Sebastian Werner <s.werner@sebastian-software.de> */
var eventemitter3 = {exports: {}};

(function (module) {

  var has = Object.prototype.hasOwnProperty,
      prefix = '~';
  /**
   * Constructor to create a storage for our \`EE\` objects.
   * An \`Events\` instance is a plain object whose properties are event names.
   *
   * @constructor
   * @private
   */

  function Events() {} //
  // We try to not inherit from \`Object.prototype\`. In some engines creating an
  // instance in this way is faster than calling \`Object.create(null)\` directly.
  // If \`Object.create(null)\` is not supported we prefix the event names with a
  // character to make sure that the built-in object properties are not
  // overridden or used as an attack vector.
  //


  if (Object.create) {
    Events.prototype = Object.create(null); //
    // This hack is needed because the \`__proto__\` property is still inherited in
    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    //

    if (!new Events().__proto__) prefix = false;
  }
  /**
   * Representation of a single event listener.
   *
   * @param {Function} fn The listener function.
   * @param {*} context The context to invoke the listener with.
   * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
   * @constructor
   * @private
   */


  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }
  /**
   * Add a listener for a given event.
   *
   * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} context The context to invoke the listener with.
   * @param {Boolean} once Specify if the listener is a one-time listener.
   * @returns {EventEmitter}
   * @private
   */


  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== 'function') {
      throw new TypeError('The listener must be a function');
    }

    var listener = new EE(fn, context || emitter, once),
        evt = prefix ? prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
    return emitter;
  }
  /**
   * Clear event by name.
   *
   * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
   * @param {(String|Symbol)} evt The Event name.
   * @private
   */


  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
  }
  /**
   * Minimal \`EventEmitter\` interface that is molded against the Node.js
   * \`EventEmitter\` interface.
   *
   * @constructor
   * @public
   */


  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }
  /**
   * Return an array listing the events for which the emitter has registered
   * listeners.
   *
   * @returns {Array}
   * @public
   */


  EventEmitter.prototype.eventNames = function eventNames() {
    var names = [],
        events,
        name;
    if (this._eventsCount === 0) return names;

    for (name in events = this._events) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };
  /**
   * Return the listeners registered for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Array} The registered listeners.
   * @public
   */


  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event,
        handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];

    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }

    return ee;
  };
  /**
   * Return the number of listeners listening to a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Number} The number of listeners.
   * @public
   */


  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event,
        listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };
  /**
   * Calls each of the listeners registered for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Boolean} \`true\` if the event had listeners, else \`false\`.
   * @public
   */


  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt],
        len = arguments.length,
        args,
        i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;

        case 2:
          return listeners.fn.call(listeners.context, a1), true;

        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;

        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;

        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length,
          j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);
            break;

          case 2:
            listeners[i].fn.call(listeners[i].context, a1);
            break;

          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);
            break;

          case 4:
            listeners[i].fn.call(listeners[i].context, a1, a2, a3);
            break;

          default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
              args[j - 1] = arguments[j];
            }
            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };
  /**
   * Add a listener for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} \`this\`.
   * @public
   */


  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };
  /**
   * Add a one-time listener for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} \`this\`.
   * @public
   */


  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };
  /**
   * Remove the listeners of a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn Only remove the listeners that match this function.
   * @param {*} context Only remove the listeners that have this context.
   * @param {Boolean} once Only remove one-time listeners.
   * @returns {EventEmitter} \`this\`.
   * @public
   */


  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;
    if (!this._events[evt]) return this;

    if (!fn) {
      clearEvent(this, evt);
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
          events.push(listeners[i]);
        }
      } //
      // Reset the array, or remove it completely if we have no more listeners.
      //


      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
    }

    return this;
  };
  /**
   * Remove all listeners, or those of the specified event.
   *
   * @param {(String|Symbol)} [event] The event name.
   * @returns {EventEmitter} \`this\`.
   * @public
   */


  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  }; //
  // Alias methods names because people roll like that.
  //


  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on; //
  // Expose the prefix.
  //

  EventEmitter.prefixed = prefix; //
  // Allow \`EventEmitter\` to be imported as module namespace.
  //

  EventEmitter.EventEmitter = EventEmitter; //
  // Expose the module.
  //

  {
    module.exports = EventEmitter;
  }
})(eventemitter3);

var EventEmitter = eventemitter3.exports;

class TimeoutError extends Error {
  constructor(message) {
    super(message);
    this.name = 'TimeoutError';
  }

}
function pTimeout(promise, milliseconds, fallback, options) {
  let timer;
  const cancelablePromise = new Promise((resolve, reject) => {
    if (typeof milliseconds !== 'number' || Math.sign(milliseconds) !== 1) {
      throw new TypeError(\`Expected \\\\\`milliseconds\\\\\` to be a positive number, got \\\\\`\${milliseconds}\\\\\`\`);
    }

    if (milliseconds === Number.POSITIVE_INFINITY) {
      resolve(promise);
      return;
    }

    options = {
      customTimers: {
        setTimeout,
        clearTimeout
      },
      ...options
    };
    timer = options.customTimers.setTimeout.call(undefined, () => {
      if (typeof fallback === 'function') {
        try {
          resolve(fallback());
        } catch (error) {
          reject(error);
        }

        return;
      }

      const message = typeof fallback === 'string' ? fallback : \`Promise timed out after \${milliseconds} milliseconds\`;
      const timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);

      if (typeof promise.cancel === 'function') {
        promise.cancel();
      }

      reject(timeoutError);
    }, milliseconds);

    (async () => {
      try {
        resolve(await promise);
      } catch (error) {
        reject(error);
      } finally {
        options.customTimers.clearTimeout.call(undefined, timer);
      }
    })();
  });

  cancelablePromise.clear = () => {
    clearTimeout(timer);
    timer = undefined;
  };

  return cancelablePromise;
}

// Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound
// Used to compute insertion index to keep queue sorted after insertion
function lowerBound(array, value, comparator) {
  let first = 0;
  let count = array.length;

  while (count > 0) {
    const step = Math.trunc(count / 2);
    let it = first + step;

    if (comparator(array[it], value) <= 0) {
      first = ++it;
      count -= step + 1;
    } else {
      count = step;
    }
  }

  return first;
}

class PriorityQueue {
  constructor() {
    Object.defineProperty(this, \\"_queue\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
  }

  enqueue(run, options) {
    var _a;

    options = {
      priority: 0,
      ...options
    };
    const element = {
      priority: options.priority,
      run
    };

    if (this.size && ((_a = this._queue[this.size - 1]) === null || _a === void 0 ? void 0 : _a.priority) >= options.priority) {
      this._queue.push(element);

      return;
    }

    const index = lowerBound(this._queue, element, (a, b) => b.priority - a.priority);

    this._queue.splice(index, 0, element);
  }

  dequeue() {
    const item = this._queue.shift();

    return item === null || item === void 0 ? void 0 : item.run;
  }

  filter(options) {
    return this._queue.filter(element => element.priority === options.priority).map(element => element.run);
  }

  get size() {
    return this._queue.length;
  }

}

const empty = () => {};

const timeoutError = new TimeoutError();
/**
Promise queue with concurrency control.
*/

class PQueue extends EventEmitter {
  constructor(options) {
    var _a, _b, _c, _d;

    super();
    Object.defineProperty(this, \\"_carryoverConcurrencyCount\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_isIntervalIgnored\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_intervalCount\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, \\"_intervalCap\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_interval\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_intervalEnd\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, \\"_intervalId\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_timeoutId\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_queue\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_queueClass\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_pendingCount\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    }); // The \`!\` is needed because of https://github.com/microsoft/TypeScript/issues/32194

    Object.defineProperty(this, \\"_concurrency\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_isPaused\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_resolveEmpty\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: empty
    });
    Object.defineProperty(this, \\"_resolveIdle\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: empty
    });
    Object.defineProperty(this, \\"_timeout\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, \\"_throwOnTimeout\\", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    }); // eslint-disable-next-line @typescript-eslint/consistent-type-assertions

    options = {
      carryoverConcurrencyCount: false,
      intervalCap: Number.POSITIVE_INFINITY,
      interval: 0,
      concurrency: Number.POSITIVE_INFINITY,
      autoStart: true,
      queueClass: PriorityQueue,
      ...options
    };

    if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {
      throw new TypeError(\`Expected \\\\\`intervalCap\\\\\` to be a number from 1 and up, got \\\\\`\${(_b = (_a = options.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ''}\\\\\` (\${typeof options.intervalCap})\`);
    }

    if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {
      throw new TypeError(\`Expected \\\\\`interval\\\\\` to be a finite number >= 0, got \\\\\`\${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''}\\\\\` (\${typeof options.interval})\`);
    }

    this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
    this._isIntervalIgnored = options.intervalCap === Number.POSITIVE_INFINITY || options.interval === 0;
    this._intervalCap = options.intervalCap;
    this._interval = options.interval;
    this._queue = new options.queueClass();
    this._queueClass = options.queueClass;
    this.concurrency = options.concurrency;
    this._timeout = options.timeout;
    this._throwOnTimeout = options.throwOnTimeout === true;
    this._isPaused = options.autoStart === false;
  }

  get _doesIntervalAllowAnother() {
    return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
  }

  get _doesConcurrentAllowAnother() {
    return this._pendingCount < this._concurrency;
  }

  _next() {
    this._pendingCount--;

    this._tryToStartAnother();

    this.emit('next');
  }

  _resolvePromises() {
    this._resolveEmpty();

    this._resolveEmpty = empty;

    if (this._pendingCount === 0) {
      this._resolveIdle();

      this._resolveIdle = empty;
      this.emit('idle');
    }
  }

  _onResumeInterval() {
    this._onInterval();

    this._initializeIntervalIfNeeded();

    this._timeoutId = undefined;
  }

  _isIntervalPaused() {
    const now = Date.now();

    if (this._intervalId === undefined) {
      const delay = this._intervalEnd - now;

      if (delay < 0) {
        // Act as the interval was done
        // We don't need to resume it here because it will be resumed on line 160
        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
      } else {
        // Act as the interval is pending
        if (this._timeoutId === undefined) {
          this._timeoutId = setTimeout(() => {
            this._onResumeInterval();
          }, delay);
        }

        return true;
      }
    }

    return false;
  }

  _tryToStartAnother() {
    if (this._queue.size === 0) {
      // We can clear the interval (\\"pause\\")
      // Because we can redo it later (\\"resume\\")
      if (this._intervalId) {
        clearInterval(this._intervalId);
      }

      this._intervalId = undefined;

      this._resolvePromises();

      return false;
    }

    if (!this._isPaused) {
      const canInitializeInterval = !this._isIntervalPaused();

      if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
        const job = this._queue.dequeue();

        if (!job) {
          return false;
        }

        this.emit('active');
        job();

        if (canInitializeInterval) {
          this._initializeIntervalIfNeeded();
        }

        return true;
      }
    }

    return false;
  }

  _initializeIntervalIfNeeded() {
    if (this._isIntervalIgnored || this._intervalId !== undefined) {
      return;
    }

    this._intervalId = setInterval(() => {
      this._onInterval();
    }, this._interval);
    this._intervalEnd = Date.now() + this._interval;
  }

  _onInterval() {
    if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
      clearInterval(this._intervalId);
      this._intervalId = undefined;
    }

    this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;

    this._processQueue();
  }
  /**
  Executes all queued functions until it reaches the limit.
  */


  _processQueue() {
    // eslint-disable-next-line no-empty
    while (this._tryToStartAnother()) {}
  }

  get concurrency() {
    return this._concurrency;
  }

  set concurrency(newConcurrency) {
    if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {
      throw new TypeError(\`Expected \\\\\`concurrency\\\\\` to be a number from 1 and up, got \\\\\`\${newConcurrency}\\\\\` (\${typeof newConcurrency})\`);
    }

    this._concurrency = newConcurrency;

    this._processQueue();
  }
  /**
  Adds a sync or async task to the queue. Always returns a promise.
  */


  async add(fn, options = {}) {
    return new Promise((resolve, reject) => {
      const run = async () => {
        this._pendingCount++;
        this._intervalCount++;

        try {
          const operation = this._timeout === undefined && options.timeout === undefined ? fn() : pTimeout(Promise.resolve(fn()), options.timeout === undefined ? this._timeout : options.timeout, () => {
            if (options.throwOnTimeout === undefined ? this._throwOnTimeout : options.throwOnTimeout) {
              reject(timeoutError);
            }

            return undefined;
          });
          const result = await operation;
          resolve(result);
          this.emit('completed', result);
        } catch (error) {
          reject(error);
          this.emit('error', error);
        }

        this._next();
      };

      this._queue.enqueue(run, options);

      this._tryToStartAnother();

      this.emit('add');
    });
  }
  /**
  Same as \`.add()\`, but accepts an array of sync or async functions.
   @returns A promise that resolves when all functions are resolved.
  */


  async addAll(functions, options) {
    return Promise.all(functions.map(async function_ => this.add(function_, options)));
  }
  /**
  Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via \`options.autoStart = false\` or by \`.pause()\` method.)
  */


  start() {
    if (!this._isPaused) {
      return this;
    }

    this._isPaused = false;

    this._processQueue();

    return this;
  }
  /**
  Put queue execution on hold.
  */


  pause() {
    this._isPaused = true;
  }
  /**
  Clear the queue.
  */


  clear() {
    this._queue = new this._queueClass();
  }
  /**
  Can be called multiple times. Useful if you for example add additional items at a later time.
   @returns A promise that settles when the queue becomes empty.
  */


  async onEmpty() {
    // Instantly resolve if the queue is empty
    if (this._queue.size === 0) {
      return;
    }

    return new Promise(resolve => {
      const existingResolve = this._resolveEmpty;

      this._resolveEmpty = () => {
        existingResolve();
        resolve();
      };
    });
  }
  /**
  @returns A promise that settles when the queue size is less than the given limit: \`queue.size < limit\`.
   If you want to avoid having the queue grow beyond a certain size you can \`await queue.onSizeLessThan()\` before adding a new item.
   Note that this only limits the number of items waiting to start. There could still be up to \`concurrency\` jobs already running that this call does not include in its calculation.
  */


  async onSizeLessThan(limit) {
    // Instantly resolve if the queue is empty.
    if (this._queue.size < limit) {
      return;
    }

    return new Promise(resolve => {
      const listener = () => {
        if (this._queue.size < limit) {
          this.removeListener('next', listener);
          resolve();
        }
      };

      this.on('next', listener);
    });
  }
  /**
  The difference with \`.onEmpty\` is that \`.onIdle\` guarantees that all work from the queue has finished. \`.onEmpty\` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.
   @returns A promise that settles when the queue becomes empty, and all promises have completed; \`queue.size === 0 && queue.pending === 0\`.
  */


  async onIdle() {
    // Instantly resolve if none pending and if nothing else is queued
    if (this._pendingCount === 0 && this._queue.size === 0) {
      return;
    }

    return new Promise(resolve => {
      const existingResolve = this._resolveIdle;

      this._resolveIdle = () => {
        existingResolve();
        resolve();
      };
    });
  }
  /**
  Size of the queue, the number of queued items waiting to run.
  */


  get size() {
    return this._queue.size;
  }
  /**
  Size of the queue, filtered by the given options.
   For example, this can be used to find the number of items remaining in the queue with a specific priority level.
  */


  sizeBy(options) {
    // eslint-disable-next-line unicorn/no-array-callback-reference
    return this._queue.filter(options).length;
  }
  /**
  Number of running items (no longer in the queue).
  */


  get pending() {
    return this._pendingCount;
  }
  /**
  Whether the queue is currently paused.
  */


  get isPaused() {
    return this._isPaused;
  }

  get timeout() {
    return this._timeout;
  }
  /**
  Set the timeout for future operations.
  */


  set timeout(milliseconds) {
    this._timeout = milliseconds;
  }

}

async function helper() {
  console.log(\\"Async helper\\");
}

async function main() {
  const queue = new PQueue();
  queue.add(await helper());
}

main();
//# sourceMappingURL=index.esm.js.map
"
`;

exports[`Publish Test File via Babel: umd 1`] = `
"/*! deep-pqueue v1.0.0 by Sebastian Werner <s.werner@sebastian-software.de> */
(function (factory) {
  typeof define === 'function' && define.amd ? define(factory) :
  factory();
})((function () { 'use strict';

  var eventemitter3 = {exports: {}};

  (function (module) {

    var has = Object.prototype.hasOwnProperty,
        prefix = '~';
    /**
     * Constructor to create a storage for our \`EE\` objects.
     * An \`Events\` instance is a plain object whose properties are event names.
     *
     * @constructor
     * @private
     */

    function Events() {} //
    // We try to not inherit from \`Object.prototype\`. In some engines creating an
    // instance in this way is faster than calling \`Object.create(null)\` directly.
    // If \`Object.create(null)\` is not supported we prefix the event names with a
    // character to make sure that the built-in object properties are not
    // overridden or used as an attack vector.
    //


    if (Object.create) {
      Events.prototype = Object.create(null); //
      // This hack is needed because the \`__proto__\` property is still inherited in
      // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
      //

      if (!new Events().__proto__) prefix = false;
    }
    /**
     * Representation of a single event listener.
     *
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
     * @constructor
     * @private
     */


    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    /**
     * Add a listener for a given event.
     *
     * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} once Specify if the listener is a one-time listener.
     * @returns {EventEmitter}
     * @private
     */


    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function');
      }

      var listener = new EE(fn, context || emitter, once),
          evt = prefix ? prefix + event : event;
      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);else emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    /**
     * Clear event by name.
     *
     * @param {EventEmitter} emitter Reference to the \`EventEmitter\` instance.
     * @param {(String|Symbol)} evt The Event name.
     * @private
     */


    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();else delete emitter._events[evt];
    }
    /**
     * Minimal \`EventEmitter\` interface that is molded against the Node.js
     * \`EventEmitter\` interface.
     *
     * @constructor
     * @public
     */


    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    /**
     * Return an array listing the events for which the emitter has registered
     * listeners.
     *
     * @returns {Array}
     * @public
     */


    EventEmitter.prototype.eventNames = function eventNames() {
      var names = [],
          events,
          name;
      if (this._eventsCount === 0) return names;

      for (name in events = this._events) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }

      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }

      return names;
    };
    /**
     * Return the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Array} The registered listeners.
     * @public
     */


    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event,
          handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];

      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }

      return ee;
    };
    /**
     * Return the number of listeners listening to a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Number} The number of listeners.
     * @public
     */


    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event,
          listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    /**
     * Calls each of the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Boolean} \`true\` if the event had listeners, else \`false\`.
     * @public
     */


    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt],
          len = arguments.length,
          args,
          i;

      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;

          case 2:
            return listeners.fn.call(listeners.context, a1), true;

          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;

          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;

          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;

          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }

        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }

        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length,
            j;

        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;

            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;

            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;

            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;

            default:
              if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }

      return true;
    };
    /**
     * Add a listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} \`this\`.
     * @public
     */


    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    /**
     * Add a one-time listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} \`this\`.
     * @public
     */


    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    /**
     * Remove the listeners of a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn Only remove the listeners that match this function.
     * @param {*} context Only remove the listeners that have this context.
     * @param {Boolean} once Only remove one-time listeners.
     * @returns {EventEmitter} \`this\`.
     * @public
     */


    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return this;

      if (!fn) {
        clearEvent(this, evt);
        return this;
      }

      var listeners = this._events[evt];

      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        } //
        // Reset the array, or remove it completely if we have no more listeners.
        //


        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else clearEvent(this, evt);
      }

      return this;
    };
    /**
     * Remove all listeners, or those of the specified event.
     *
     * @param {(String|Symbol)} [event] The event name.
     * @returns {EventEmitter} \`this\`.
     * @public
     */


    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;

      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }

      return this;
    }; //
    // Alias methods names because people roll like that.
    //


    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on; //
    // Expose the prefix.
    //

    EventEmitter.prefixed = prefix; //
    // Allow \`EventEmitter\` to be imported as module namespace.
    //

    EventEmitter.EventEmitter = EventEmitter; //
    // Expose the module.
    //

    {
      module.exports = EventEmitter;
    }
  })(eventemitter3);

  var EventEmitter = eventemitter3.exports;

  class TimeoutError extends Error {
    constructor(message) {
      super(message);
      this.name = 'TimeoutError';
    }

  }
  function pTimeout(promise, milliseconds, fallback, options) {
    let timer;
    const cancelablePromise = new Promise((resolve, reject) => {
      if (typeof milliseconds !== 'number' || Math.sign(milliseconds) !== 1) {
        throw new TypeError(\`Expected \\\\\`milliseconds\\\\\` to be a positive number, got \\\\\`\${milliseconds}\\\\\`\`);
      }

      if (milliseconds === Number.POSITIVE_INFINITY) {
        resolve(promise);
        return;
      }

      options = {
        customTimers: {
          setTimeout,
          clearTimeout
        },
        ...options
      };
      timer = options.customTimers.setTimeout.call(undefined, () => {
        if (typeof fallback === 'function') {
          try {
            resolve(fallback());
          } catch (error) {
            reject(error);
          }

          return;
        }

        const message = typeof fallback === 'string' ? fallback : \`Promise timed out after \${milliseconds} milliseconds\`;
        const timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);

        if (typeof promise.cancel === 'function') {
          promise.cancel();
        }

        reject(timeoutError);
      }, milliseconds);

      (async () => {
        try {
          resolve(await promise);
        } catch (error) {
          reject(error);
        } finally {
          options.customTimers.clearTimeout.call(undefined, timer);
        }
      })();
    });

    cancelablePromise.clear = () => {
      clearTimeout(timer);
      timer = undefined;
    };

    return cancelablePromise;
  }

  // Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound
  // Used to compute insertion index to keep queue sorted after insertion
  function lowerBound(array, value, comparator) {
    let first = 0;
    let count = array.length;

    while (count > 0) {
      const step = Math.trunc(count / 2);
      let it = first + step;

      if (comparator(array[it], value) <= 0) {
        first = ++it;
        count -= step + 1;
      } else {
        count = step;
      }
    }

    return first;
  }

  class PriorityQueue {
    constructor() {
      Object.defineProperty(this, \\"_queue\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: []
      });
    }

    enqueue(run, options) {
      var _a;

      options = {
        priority: 0,
        ...options
      };
      const element = {
        priority: options.priority,
        run
      };

      if (this.size && ((_a = this._queue[this.size - 1]) === null || _a === void 0 ? void 0 : _a.priority) >= options.priority) {
        this._queue.push(element);

        return;
      }

      const index = lowerBound(this._queue, element, (a, b) => b.priority - a.priority);

      this._queue.splice(index, 0, element);
    }

    dequeue() {
      const item = this._queue.shift();

      return item === null || item === void 0 ? void 0 : item.run;
    }

    filter(options) {
      return this._queue.filter(element => element.priority === options.priority).map(element => element.run);
    }

    get size() {
      return this._queue.length;
    }

  }

  const empty = () => {};

  const timeoutError = new TimeoutError();
  /**
  Promise queue with concurrency control.
  */

  class PQueue extends EventEmitter {
    constructor(options) {
      var _a, _b, _c, _d;

      super();
      Object.defineProperty(this, \\"_carryoverConcurrencyCount\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, \\"_isIntervalIgnored\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, \\"_intervalCount\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: 0
      });
      Object.defineProperty(this, \\"_intervalCap\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, \\"_interval\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, \\"_intervalEnd\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: 0
      });
      Object.defineProperty(this, \\"_intervalId\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, \\"_timeoutId\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, \\"_queue\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, \\"_queueClass\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, \\"_pendingCount\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: 0
      }); // The \`!\` is needed because of https://github.com/microsoft/TypeScript/issues/32194

      Object.defineProperty(this, \\"_concurrency\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, \\"_isPaused\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, \\"_resolveEmpty\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: empty
      });
      Object.defineProperty(this, \\"_resolveIdle\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: empty
      });
      Object.defineProperty(this, \\"_timeout\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, \\"_throwOnTimeout\\", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      }); // eslint-disable-next-line @typescript-eslint/consistent-type-assertions

      options = {
        carryoverConcurrencyCount: false,
        intervalCap: Number.POSITIVE_INFINITY,
        interval: 0,
        concurrency: Number.POSITIVE_INFINITY,
        autoStart: true,
        queueClass: PriorityQueue,
        ...options
      };

      if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {
        throw new TypeError(\`Expected \\\\\`intervalCap\\\\\` to be a number from 1 and up, got \\\\\`\${(_b = (_a = options.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ''}\\\\\` (\${typeof options.intervalCap})\`);
      }

      if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {
        throw new TypeError(\`Expected \\\\\`interval\\\\\` to be a finite number >= 0, got \\\\\`\${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''}\\\\\` (\${typeof options.interval})\`);
      }

      this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
      this._isIntervalIgnored = options.intervalCap === Number.POSITIVE_INFINITY || options.interval === 0;
      this._intervalCap = options.intervalCap;
      this._interval = options.interval;
      this._queue = new options.queueClass();
      this._queueClass = options.queueClass;
      this.concurrency = options.concurrency;
      this._timeout = options.timeout;
      this._throwOnTimeout = options.throwOnTimeout === true;
      this._isPaused = options.autoStart === false;
    }

    get _doesIntervalAllowAnother() {
      return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
    }

    get _doesConcurrentAllowAnother() {
      return this._pendingCount < this._concurrency;
    }

    _next() {
      this._pendingCount--;

      this._tryToStartAnother();

      this.emit('next');
    }

    _resolvePromises() {
      this._resolveEmpty();

      this._resolveEmpty = empty;

      if (this._pendingCount === 0) {
        this._resolveIdle();

        this._resolveIdle = empty;
        this.emit('idle');
      }
    }

    _onResumeInterval() {
      this._onInterval();

      this._initializeIntervalIfNeeded();

      this._timeoutId = undefined;
    }

    _isIntervalPaused() {
      const now = Date.now();

      if (this._intervalId === undefined) {
        const delay = this._intervalEnd - now;

        if (delay < 0) {
          // Act as the interval was done
          // We don't need to resume it here because it will be resumed on line 160
          this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
        } else {
          // Act as the interval is pending
          if (this._timeoutId === undefined) {
            this._timeoutId = setTimeout(() => {
              this._onResumeInterval();
            }, delay);
          }

          return true;
        }
      }

      return false;
    }

    _tryToStartAnother() {
      if (this._queue.size === 0) {
        // We can clear the interval (\\"pause\\")
        // Because we can redo it later (\\"resume\\")
        if (this._intervalId) {
          clearInterval(this._intervalId);
        }

        this._intervalId = undefined;

        this._resolvePromises();

        return false;
      }

      if (!this._isPaused) {
        const canInitializeInterval = !this._isIntervalPaused();

        if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
          const job = this._queue.dequeue();

          if (!job) {
            return false;
          }

          this.emit('active');
          job();

          if (canInitializeInterval) {
            this._initializeIntervalIfNeeded();
          }

          return true;
        }
      }

      return false;
    }

    _initializeIntervalIfNeeded() {
      if (this._isIntervalIgnored || this._intervalId !== undefined) {
        return;
      }

      this._intervalId = setInterval(() => {
        this._onInterval();
      }, this._interval);
      this._intervalEnd = Date.now() + this._interval;
    }

    _onInterval() {
      if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
        clearInterval(this._intervalId);
        this._intervalId = undefined;
      }

      this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;

      this._processQueue();
    }
    /**
    Executes all queued functions until it reaches the limit.
    */


    _processQueue() {
      // eslint-disable-next-line no-empty
      while (this._tryToStartAnother()) {}
    }

    get concurrency() {
      return this._concurrency;
    }

    set concurrency(newConcurrency) {
      if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {
        throw new TypeError(\`Expected \\\\\`concurrency\\\\\` to be a number from 1 and up, got \\\\\`\${newConcurrency}\\\\\` (\${typeof newConcurrency})\`);
      }

      this._concurrency = newConcurrency;

      this._processQueue();
    }
    /**
    Adds a sync or async task to the queue. Always returns a promise.
    */


    async add(fn, options = {}) {
      return new Promise((resolve, reject) => {
        const run = async () => {
          this._pendingCount++;
          this._intervalCount++;

          try {
            const operation = this._timeout === undefined && options.timeout === undefined ? fn() : pTimeout(Promise.resolve(fn()), options.timeout === undefined ? this._timeout : options.timeout, () => {
              if (options.throwOnTimeout === undefined ? this._throwOnTimeout : options.throwOnTimeout) {
                reject(timeoutError);
              }

              return undefined;
            });
            const result = await operation;
            resolve(result);
            this.emit('completed', result);
          } catch (error) {
            reject(error);
            this.emit('error', error);
          }

          this._next();
        };

        this._queue.enqueue(run, options);

        this._tryToStartAnother();

        this.emit('add');
      });
    }
    /**
    Same as \`.add()\`, but accepts an array of sync or async functions.
     @returns A promise that resolves when all functions are resolved.
    */


    async addAll(functions, options) {
      return Promise.all(functions.map(async function_ => this.add(function_, options)));
    }
    /**
    Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via \`options.autoStart = false\` or by \`.pause()\` method.)
    */


    start() {
      if (!this._isPaused) {
        return this;
      }

      this._isPaused = false;

      this._processQueue();

      return this;
    }
    /**
    Put queue execution on hold.
    */


    pause() {
      this._isPaused = true;
    }
    /**
    Clear the queue.
    */


    clear() {
      this._queue = new this._queueClass();
    }
    /**
    Can be called multiple times. Useful if you for example add additional items at a later time.
     @returns A promise that settles when the queue becomes empty.
    */


    async onEmpty() {
      // Instantly resolve if the queue is empty
      if (this._queue.size === 0) {
        return;
      }

      return new Promise(resolve => {
        const existingResolve = this._resolveEmpty;

        this._resolveEmpty = () => {
          existingResolve();
          resolve();
        };
      });
    }
    /**
    @returns A promise that settles when the queue size is less than the given limit: \`queue.size < limit\`.
     If you want to avoid having the queue grow beyond a certain size you can \`await queue.onSizeLessThan()\` before adding a new item.
     Note that this only limits the number of items waiting to start. There could still be up to \`concurrency\` jobs already running that this call does not include in its calculation.
    */


    async onSizeLessThan(limit) {
      // Instantly resolve if the queue is empty.
      if (this._queue.size < limit) {
        return;
      }

      return new Promise(resolve => {
        const listener = () => {
          if (this._queue.size < limit) {
            this.removeListener('next', listener);
            resolve();
          }
        };

        this.on('next', listener);
      });
    }
    /**
    The difference with \`.onEmpty\` is that \`.onIdle\` guarantees that all work from the queue has finished. \`.onEmpty\` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.
     @returns A promise that settles when the queue becomes empty, and all promises have completed; \`queue.size === 0 && queue.pending === 0\`.
    */


    async onIdle() {
      // Instantly resolve if none pending and if nothing else is queued
      if (this._pendingCount === 0 && this._queue.size === 0) {
        return;
      }

      return new Promise(resolve => {
        const existingResolve = this._resolveIdle;

        this._resolveIdle = () => {
          existingResolve();
          resolve();
        };
      });
    }
    /**
    Size of the queue, the number of queued items waiting to run.
    */


    get size() {
      return this._queue.size;
    }
    /**
    Size of the queue, filtered by the given options.
     For example, this can be used to find the number of items remaining in the queue with a specific priority level.
    */


    sizeBy(options) {
      // eslint-disable-next-line unicorn/no-array-callback-reference
      return this._queue.filter(options).length;
    }
    /**
    Number of running items (no longer in the queue).
    */


    get pending() {
      return this._pendingCount;
    }
    /**
    Whether the queue is currently paused.
    */


    get isPaused() {
      return this._isPaused;
    }

    get timeout() {
      return this._timeout;
    }
    /**
    Set the timeout for future operations.
    */


    set timeout(milliseconds) {
      this._timeout = milliseconds;
    }

  }

  async function helper() {
    console.log(\\"Async helper\\");
  }

  async function main() {
    const queue = new PQueue();
    queue.add(await helper());
  }

  main();

}));
//# sourceMappingURL=index.umd.js.map
"
`;
